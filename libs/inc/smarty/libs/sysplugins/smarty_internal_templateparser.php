<?php

class TP_yyToken implements ArrayAccess
{

    public $string = '';

    public $metadata = array();

    public function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    public function __toString()
    {
        return $this->string;
    }

    public function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    public function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    public function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ? $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);

                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class TP_yyStackEntry
{

    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
}

;

#line 13 "../smarty/lexer/smarty_internal_templateparser.y"

/**
 * Smarty Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the smarty_internal_templateparser.y file
 *
 * @package    Smarty
 * @subpackage Compiler
 * @author     Uwe Tews
 */
class Smarty_Internal_Templateparser
{

    #line 26 "../smarty/lexer/smarty_internal_templateparser.y"

    const Err1 = "Security error: Call to private object member not allowed";

    const Err2 = "Security error: Call to dynamic object member not allowed";

    const Err3 = "PHP in template not allowed. Use SmartyBC to enable it";

    /**
     * result status
     *
     * @var bool
     */
    public $successful = true;

    /**
     * return value
     *
     * @var mixed
     */
    public $retvalue = 0;

    /**
     * counter for prefix code
     *
     * @var int
     */
    public static $prefix_number = 0;

    /**
     * @var
     */
    public $yymajor;

    /**
     * last index of array variable
     *
     * @var mixed
     */
    public $last_index;

    /**
     * last variable name
     *
     * @var string
     */
    public $last_variable;

    /**
     * root parse tree buffer
     *
     * @var Smarty_Internal_ParseTree
     */
    public $root_buffer;

    /**
     * current parse tree object
     *
     * @var Smarty_Internal_ParseTree
     */
    public $current_buffer;

    /**
     * lexer object
     *
     * @var Smarty_Internal_Templatelexer
     */
    private $lex;

    /**
     * internal error flag
     *
     * @var bool
     */
    private $internalError = false;

    /**
     * {strip} status
     *
     * @var bool
     */
    public $strip = false;

    /**
     * compiler object
     *
     * @var Smarty_Internal_TemplateCompilerBase
     */
    public $compiler = null;

    /**
     * smarty object
     *
     * @var Smarty
     */
    public $smarty = null;

    /**
     * template object
     *
     * @var Smarty_Internal_Template
     */
    public $template = null;

    /**
     * block nesting level
     *
     * @var int
     */
    public $block_nesting_level = 0;

    /**
     * security object
     *
     * @var Smarty_Security
     */
    private $security = null;

    /**
     * PHP tag handling mode
     *
     * @var int
     */
    private $php_handling = 0;

    /**
     * constructor
     *
     * @param Smarty_Internal_Templatelexer        $lex
     * @param Smarty_Internal_TemplateCompilerBase $compiler
     */
    function __construct(Smarty_Internal_Templatelexer $lex, Smarty_Internal_TemplateCompilerBase $compiler)
    {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->template = $this->compiler->template;
        $this->smarty = $this->template->smarty;
        $this->compiler->has_variable_string = false;
        $this->compiler->prefix_code = array();
        if ($this->security = isset($this->smarty->security_policy)) {
            $this->php_handling = $this->smarty->security_policy->php_handling;
        } else {
            $this->php_handling = $this->smarty->php_handling;
        }
        $this->current_buffer = $this->root_buffer = new Smarty_Internal_ParseTree_Template($this);
    }

    /**
     * insert PHP code in current buffer
     *
     * @param string $code
     */
    public function insertPhpCode($code)
    {
        $this->current_buffer->append_subtree(new Smarty_Internal_ParseTree_Tag($this, $code));
    }

    /**
     *  merge PHP code with prefix code and return parse tree tag object
     *
     * @param string $code
     *
     * @return Smarty_Internal_ParseTree_Tag
     */
    public function mergePrefixCode($code)
    {
        $tmp = '';
        foreach ($this->compiler->prefix_code as $preCode) {
            $tmp = empty($tmp) ? $preCode : $this->compiler->appendCode($tmp, $preCode);
        }
        $this->compiler->prefix_code = array();
        $tmp = empty($tmp) ? $code : $this->compiler->appendCode($tmp, $code);
        return new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp, true));
    }

    const TP_VERT = 1;

    const TP_COLON = 2;

    const TP_COMMENT = 3;

    const TP_PHP = 4;

    const TP_XMLTAG = 5;

    const TP_TEXT = 6;

    const TP_STRIPON = 7;

    const TP_STRIPOFF = 8;

    const TP_BLOCKSOURCE = 9;

    const TP_LITERALSTART = 10;

    const TP_LITERALEND = 11;

    const TP_LITERAL = 12;

    const TP_RDEL = 13;

    const TP_SIMPELOUTPUT = 14;

    const TP_LDEL = 15;

    const TP_DOLLARID = 16;

    const TP_EQUAL = 17;

    const TP_SIMPLETAG = 18;

    const TP_ID = 19;

    const TP_PTR = 20;

    const TP_LDELIF = 21;

    const TP_LDELFOR = 22;

    const TP_SEMICOLON = 23;

    const TP_INCDEC = 24;

    const TP_TO = 25;

    const TP_STEP = 26;

    const TP_LDELFOREACH = 27;

    const TP_SPACE = 28;

    const TP_AS = 29;

    const TP_APTR = 30;

    const TP_LDELSETFILTER = 31;

    const TP_SMARTYBLOCKCHILDPARENT = 32;

    const TP_CLOSETAG = 33;

    const TP_LDELSLASH = 34;

    const TP_ATTR = 35;

    const TP_INTEGER = 36;

    const TP_COMMA = 37;

    const TP_OPENP = 38;

    const TP_CLOSEP = 39;

    const TP_MATH = 40;

    const TP_UNIMATH = 41;

    const TP_ISIN = 42;

    const TP_INSTANCEOF = 43;

    const TP_QMARK = 44;

    const TP_NOT = 45;

    const TP_TYPECAST = 46;

    const TP_HEX = 47;

    const TP_DOT = 48;

    const TP_SINGLEQUOTESTRING = 49;

    const TP_DOUBLECOLON = 50;

    const TP_NAMESPACE = 51;

    const TP_AT = 52;

    const TP_HATCH = 53;

    const TP_OPENB = 54;

    const TP_CLOSEB = 55;

    const TP_DOLLAR = 56;

    const TP_LOGOP = 57;

    const TP_TLOGOP = 58;

    const TP_SINGLECOND = 59;

    const TP_QUOTE = 60;

    const TP_BACKTICK = 61;

    const YY_NO_ACTION = 537;

    const YY_ACCEPT_ACTION = 536;

    const YY_ERROR_ACTION = 535;

    const YY_SZ_ACTTAB = 2069;

    static public $yy_action = array(263, 8, 133, 21, 265, 74, 178, 7, 84, 244, 16, 93, 163, 116, 270, 259, 300, 221, 328, 317, 222, 259, 218, 12, 28, 151, 3, 43, 140, 12, 19, 39, 41, 314, 240, 292, 19, 215, 192, 81, 1, 3, 297, 90, 158, 183, 52, 263, 8, 132, 94, 265, 200, 259, 7, 84, 25, 281, 25, 281, 116, 237, 230, 211, 221, 108, 317, 222, 297, 207, 192, 28, 192, 452, 43, 184, 267, 256, 39, 41, 314, 240, 231, 241, 215, 452, 81, 1, 338, 297, 320, 137, 13, 52, 263, 8, 134, 10, 265, 212, 452, 7, 84, 244, 16, 91, 160, 116, 270, 17, 205, 221, 452, 317, 222, 259, 218, 12, 28, 171, 312, 43, 410, 97, 19, 39, 41, 314, 240, 292, 277, 215, 192, 81, 1, 205, 297, 410, 169, 173, 52, 263, 8, 134, 410, 265, 197, 365, 7, 84, 253, 249, 243, 225, 116, 205, 232, 337, 221, 335, 317, 222, 12, 218, 232, 28, 244, 16, 43, 19, 297, 270, 39, 41, 314, 240, 292, 226, 215, 205, 81, 1, 124, 297, 195, 15, 101, 52, 263, 8, 134, 410, 265, 199, 205, 7, 84, 299, 326, 205, 308, 116, 187, 289, 235, 221, 410, 317, 222, 284, 208, 404, 28, 410, 107, 43, 219, 205, 465, 39, 41, 314, 240, 292, 465, 215, 12, 81, 1, 407, 297, 316, 310, 19, 52, 263, 8, 135, 167, 265, 212, 335, 7, 84, 407, 100, 232, 259, 116, 237, 262, 407, 221, 108, 317, 222, 30, 218, 33, 28, 136, 100, 43, 224, 195, 220, 39, 41, 314, 240, 292, 205, 215, 138, 81, 1, 27, 297, 247, 85, 334, 52, 263, 8, 134, 219, 265, 212, 23, 7, 84, 111, 321, 96, 142, 116, 185, 81, 12, 221, 297, 317, 222, 259, 198, 19, 28, 22, 312, 43, 27, 34, 251, 39, 41, 314, 240, 292, 260, 215, 192, 81, 1, 192, 297, 92, 165, 173, 52, 263, 8, 131, 6, 265, 212, 259, 7, 84, 465, 298, 244, 16, 116, 453, 465, 270, 221, 2, 317, 222, 323, 218, 192, 5, 23, 453, 43, 100, 189, 113, 39, 41, 314, 240, 292, 159, 215, 452, 81, 1, 27, 297, 295, 143, 259, 52, 263, 8, 136, 452, 265, 212, 259, 7, 84, 192, 322, 111, 331, 116, 155, 195, 276, 221, 255, 317, 222, 266, 218, 195, 26, 182, 100, 43, 239, 164, 37, 39, 41, 314, 240, 292, 322, 215, 259, 81, 1, 179, 297, 301, 170, 108, 52, 263, 8, 134, 276, 265, 203, 259, 7, 84, 111, 481, 481, 168, 116, 276, 481, 286, 221, 276, 317, 222, 174, 218, 120, 28, 312, 205, 43, 296, 152, 259, 39, 41, 314, 240, 292, 11, 215, 259, 81, 1, 205, 297, 19, 173, 223, 52, 263, 8, 136, 276, 265, 212, 370, 7, 84, 285, 481, 481, 156, 116, 176, 481, 120, 221, 139, 317, 222, 259, 218, 259, 26, 244, 16, 43, 188, 289, 270, 39, 41, 314, 240, 292, 105, 215, 195, 81, 195, 238, 297, 191, 289, 408, 52, 311, 481, 229, 248, 246, 278, 268, 272, 273, 275, 184, 297, 258, 408, 263, 8, 227, 205, 265, 98, 408, 7, 84, 452, 35, 201, 112, 116, 290, 376, 141, 221, 172, 317, 222, 452, 234, 283, 129, 259, 190, 259, 232, 216, 12, 291, 118, 68, 110, 100, 145, 19, 101, 276, 452, 329, 307, 244, 16, 213, 330, 287, 270, 299, 269, 297, 452, 192, 237, 242, 283, 12, 108, 206, 313, 232, 216, 137, 19, 125, 64, 110, 194, 10, 274, 101, 4, 181, 329, 307, 205, 37, 213, 330, 287, 219, 299, 279, 324, 150, 283, 288, 309, 210, 261, 232, 216, 83, 146, 125, 56, 104, 242, 186, 192, 101, 312, 257, 329, 307, 319, 36, 213, 330, 287, 205, 299, 283, 144, 318, 183, 161, 232, 216, 180, 87, 118, 68, 110, 264, 259, 89, 101, 25, 281, 329, 307, 308, 154, 213, 330, 287, 147, 299, 24, 302, 283, 192, 86, 183, 157, 232, 216, 175, 315, 125, 47, 104, 119, 259, 276, 101, 25, 281, 329, 307, 88, 149, 213, 330, 287, 109, 299, 20, 217, 283, 192, 148, 304, 304, 232, 216, 95, 304, 125, 64, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 304, 304, 304, 304, 283, 304, 209, 304, 304, 232, 216, 304, 297, 125, 64, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 205, 304, 304, 232, 79, 304, 214, 82, 48, 106, 304, 304, 250, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 304, 304, 283, 304, 304, 304, 304, 232, 216, 304, 304, 125, 70, 110, 40, 42, 38, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 304, 283, 303, 305, 306, 304, 232, 216, 304, 304, 125, 49, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 80, 304, 304, 82, 44, 106, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 46, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 304, 304, 232, 216, 304, 304, 125, 60, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 72, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 183, 177, 232, 216, 304, 304, 125, 61, 110, 304, 259, 304, 101, 25, 281, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 192, 304, 232, 204, 304, 304, 114, 62, 110, 40, 42, 38, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 333, 299, 304, 304, 303, 305, 306, 304, 263, 9, 336, 304, 265, 304, 304, 7, 84, 304, 304, 304, 304, 116, 304, 304, 283, 221, 304, 317, 222, 232, 216, 304, 304, 125, 45, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 333, 299, 304, 304, 304, 327, 14, 304, 263, 9, 336, 304, 265, 304, 304, 7, 84, 304, 304, 304, 304, 116, 304, 304, 304, 221, 283, 317, 222, 304, 304, 232, 216, 304, 304, 125, 58, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 325, 14, 232, 216, 304, 304, 125, 66, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 183, 166, 232, 216, 304, 304, 125, 54, 110, 304, 259, 304, 101, 25, 281, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 192, 304, 232, 216, 304, 304, 125, 65, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 63, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 183, 162, 232, 216, 304, 304, 117, 50, 110, 304, 259, 304, 101, 25, 281, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 192, 304, 232, 216, 304, 304, 125, 53, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 78, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 76, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 304, 304, 232, 216, 304, 304, 125, 75, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 67, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 103, 73, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 304, 304, 232, 216, 304, 304, 125, 57, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 99, 59, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 71, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 304, 304, 232, 216, 304, 304, 125, 77, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 102, 69, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 304, 304, 304, 232, 216, 304, 304, 125, 56, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 304, 299, 283, 304, 304, 304, 304, 232, 202, 304, 304, 125, 55, 110, 304, 304, 304, 101, 304, 304, 329, 307, 304, 304, 213, 330, 287, 283, 299, 205, 18, 304, 232, 228, 304, 304, 123, 304, 110, 304, 304, 304, 101, 304, 304, 304, 282, 304, 304, 213, 330, 287, 283, 299, 205, 304, 304, 232, 228, 304, 304, 130, 304, 110, 304, 304, 304, 101, 40, 42, 38, 271, 304, 304, 213, 330, 287, 304, 299, 32, 304, 12, 304, 304, 233, 303, 305, 306, 19, 304, 304, 233, 304, 40, 42, 38, 481, 481, 304, 22, 304, 481, 465, 481, 481, 233, 31, 304, 481, 465, 303, 305, 306, 304, 481, 481, 304, 481, 481, 481, 465, 304, 481, 465, 304, 304, 304, 304, 304, 304, 465, 304, 465, 304, 481, 304, 465, 465, 304, 465, 304, 481, 304, 465, 304, 304, 304, 304, 465, 304, 465, 465, 481, 465, 465, 481, 304, 465, 293, 304, 283, 304, 205, 304, 205, 232, 228, 304, 304, 121, 304, 110, 304, 304, 280, 101, 362, 304, 304, 304, 304, 304, 213, 330, 287, 304, 299, 312, 304, 12, 304, 12, 304, 304, 304, 304, 19, 304, 19, 283, 304, 40, 42, 38, 232, 228, 173, 304, 126, 304, 110, 304, 205, 304, 101, 304, 304, 304, 303, 305, 306, 213, 330, 287, 283, 299, 304, 304, 304, 232, 228, 304, 304, 128, 304, 110, 304, 420, 420, 101, 153, 304, 304, 304, 304, 304, 213, 330, 287, 283, 299, 40, 42, 38, 232, 228, 304, 304, 122, 304, 110, 304, 304, 304, 101, 304, 304, 304, 303, 305, 306, 213, 330, 287, 452, 299, 420, 420, 420, 304, 304, 304, 304, 304, 304, 304, 452, 304, 304, 304, 304, 283, 304, 420, 420, 420, 232, 228, 205, 304, 127, 304, 110, 304, 304, 304, 101, 304, 304, 304, 304, 304, 304, 213, 330, 287, 233, 299, 536, 51, 245, 249, 243, 225, 304, 12, 232, 304, 481, 481, 304, 29, 19, 481, 465, 304, 304, 40, 42, 38, 304, 304, 304, 481, 481, 304, 304, 304, 481, 465, 304, 304, 304, 304, 303, 305, 306, 304, 304, 304, 304, 304, 465, 414, 465, 205, 481, 304, 465, 304, 205, 304, 304, 414, 304, 414, 304, 465, 414, 465, 304, 481, 254, 465, 304, 414, 304, 414, 304, 414, 304, 205, 304, 304, 304, 304, 304, 304, 219, 304, 205, 304, 304, 304, 40, 42, 38, 304, 304, 40, 42, 38, 193, 205, 304, 304, 304, 304, 304, 304, 304, 303, 305, 306, 205, 196, 303, 305, 306, 236, 40, 42, 38, 304, 205, 304, 304, 304, 304, 40, 42, 38, 304, 304, 304, 304, 115, 303, 305, 306, 304, 304, 40, 42, 38, 205, 303, 305, 306, 304, 205, 304, 304, 40, 42, 38, 304, 304, 304, 303, 305, 306, 252, 40, 42, 38, 304, 304, 304, 304, 303, 305, 306, 304, 304, 304, 304, 304, 304, 304, 303, 305, 306, 304, 40, 42, 38, 205, 304, 40, 42, 38, 304, 304, 304, 304, 304, 304, 304, 294, 304, 303, 305, 306, 304, 332, 303, 305, 306, 304, 312, 304, 304, 304, 12, 304, 304, 304, 304, 304, 304, 19, 304, 304, 304, 304, 304, 304, 304, 173,);

    static public $yy_lookahead = array(14, 15, 16, 15, 18, 19, 74, 21, 22, 14, 15, 73, 74, 27, 19, 83, 97, 31, 32, 33, 34, 83, 36, 28, 38, 30, 38, 41, 16, 28, 35, 45, 46, 47, 48, 49, 35, 51, 100, 53, 54, 38, 56, 73, 74, 73, 60, 14, 15, 16, 38, 18, 19, 83, 21, 22, 86, 87, 86, 87, 27, 77, 78, 79, 31, 81, 33, 34, 56, 36, 100, 38, 100, 38, 41, 10, 11, 12, 45, 46, 47, 48, 49, 48, 51, 50, 53, 54, 55, 56, 55, 48, 30, 60, 14, 15, 16, 54, 18, 19, 38, 21, 22, 14, 15, 73, 74, 27, 19, 23, 1, 31, 50, 33, 34, 83, 36, 28, 38, 30, 24, 41, 13, 37, 35, 45, 46, 47, 48, 49, 16, 51, 100, 53, 54, 1, 56, 28, 29, 43, 60, 14, 15, 16, 35, 18, 19, 13, 21, 22, 65, 66, 67, 68, 27, 1, 71, 61, 31, 66, 33, 34, 28, 36, 71, 38, 14, 15, 41, 35, 56, 19, 45, 46, 47, 48, 49, 72, 51, 1, 53, 54, 77, 56, 100, 17, 81, 60, 14, 15, 16, 13, 18, 19, 1, 21, 22, 92, 105, 1, 94, 27, 96, 97, 52, 31, 28, 33, 34, 55, 36, 13, 38, 35, 81, 41, 48, 1, 48, 45, 46, 47, 48, 49, 54, 51, 28, 53, 54, 13, 56, 98, 19, 35, 60, 14, 15, 16, 74, 18, 19, 66, 21, 22, 28, 20, 71, 83, 27, 77, 78, 35, 31, 81, 33, 34, 44, 36, 17, 38, 16, 20, 41, 19, 100, 52, 45, 46, 47, 48, 49, 1, 51, 81, 53, 54, 37, 56, 39, 104, 105, 60, 14, 15, 16, 48, 18, 19, 17, 21, 22, 50, 55, 73, 74, 27, 73, 53, 28, 31, 56, 33, 34, 83, 36, 35, 38, 17, 24, 41, 37, 17, 39, 45, 46, 47, 48, 49, 24, 51, 100, 53, 54, 100, 56, 73, 74, 43, 60, 14, 15, 16, 37, 18, 19, 83, 21, 22, 48, 55, 14, 15, 27, 38, 54, 19, 31, 38, 33, 34, 55, 36, 100, 38, 17, 50, 41, 20, 73, 50, 45, 46, 47, 48, 49, 74, 51, 38, 53, 54, 37, 56, 39, 74, 83, 60, 14, 15, 16, 50, 18, 19, 83, 21, 22, 100, 101, 50, 36, 27, 93, 100, 95, 31, 67, 33, 34, 70, 36, 100, 38, 16, 20, 41, 19, 74, 2, 45, 46, 47, 48, 49, 101, 51, 83, 53, 54, 77, 56, 19, 74, 81, 60, 14, 15, 16, 95, 18, 19, 83, 21, 22, 50, 14, 15, 93, 27, 95, 19, 91, 31, 95, 33, 34, 74, 36, 98, 38, 24, 1, 41, 51, 74, 83, 45, 46, 47, 48, 49, 28, 51, 83, 53, 54, 1, 56, 35, 43, 20, 60, 14, 15, 16, 95, 18, 19, 13, 21, 22, 91, 14, 15, 74, 27, 74, 19, 98, 31, 16, 33, 34, 83, 36, 83, 38, 14, 15, 41, 96, 97, 19, 45, 46, 47, 48, 49, 69, 51, 100, 53, 100, 19, 56, 96, 97, 13, 60, 19, 52, 17, 3, 4, 5, 6, 7, 8, 9, 10, 56, 39, 28, 14, 15, 52, 1, 18, 82, 35, 21, 22, 38, 15, 16, 19, 27, 19, 13, 74, 31, 74, 33, 34, 50, 20, 66, 19, 83, 73, 83, 71, 72, 28, 36, 75, 76, 77, 20, 53, 35, 81, 95, 38, 84, 85, 14, 15, 88, 89, 90, 19, 92, 6, 56, 50, 100, 77, 78, 66, 28, 81, 102, 103, 71, 72, 48, 35, 75, 76, 77, 19, 54, 11, 81, 38, 73, 84, 85, 1, 2, 88, 89, 90, 48, 92, 19, 36, 53, 66, 19, 19, 99, 13, 71, 72, 19, 93, 75, 76, 77, 78, 82, 100, 81, 24, 19, 84, 85, 55, 25, 88, 89, 90, 1, 92, 66, 93, 55, 73, 74, 71, 72, 82, 81, 75, 76, 77, 83, 83, 81, 81, 86, 87, 84, 85, 94, 93, 88, 89, 90, 93, 92, 30, 88, 66, 100, 81, 73, 74, 71, 72, 93, 103, 75, 76, 77, 78, 83, 95, 81, 86, 87, 84, 85, 81, 93, 88, 89, 90, 80, 92, 15, 16, 66, 100, 19, 106, 106, 71, 72, 93, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 106, 106, 106, 106, 66, 106, 99, 106, 106, 71, 72, 106, 56, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 1, 106, 106, 71, 72, 106, 99, 75, 76, 77, 106, 106, 13, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 106, 106, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 40, 41, 42, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 106, 66, 57, 58, 59, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 73, 74, 71, 72, 106, 106, 75, 76, 77, 106, 83, 106, 81, 86, 87, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 100, 106, 71, 72, 106, 106, 75, 76, 77, 40, 41, 42, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 6, 92, 106, 106, 57, 58, 59, 106, 14, 15, 16, 106, 18, 106, 106, 21, 22, 106, 106, 106, 106, 27, 106, 106, 66, 31, 106, 33, 34, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 6, 92, 106, 106, 106, 60, 61, 106, 14, 15, 16, 106, 18, 106, 106, 21, 22, 106, 106, 106, 106, 27, 106, 106, 106, 31, 66, 33, 34, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 60, 61, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 73, 74, 71, 72, 106, 106, 75, 76, 77, 106, 83, 106, 81, 86, 87, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 100, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 73, 74, 71, 72, 106, 106, 75, 76, 77, 106, 83, 106, 81, 86, 87, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 100, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 106, 92, 66, 106, 106, 106, 106, 71, 72, 106, 106, 75, 76, 77, 106, 106, 106, 81, 106, 106, 84, 85, 106, 106, 88, 89, 90, 66, 92, 1, 2, 106, 71, 72, 106, 106, 75, 106, 77, 106, 106, 106, 81, 106, 106, 106, 85, 106, 106, 88, 89, 90, 66, 92, 1, 106, 106, 71, 72, 106, 106, 75, 106, 77, 106, 106, 106, 81, 40, 41, 42, 85, 106, 106, 88, 89, 90, 106, 92, 26, 106, 28, 106, 106, 2, 57, 58, 59, 35, 106, 106, 2, 106, 40, 41, 42, 14, 15, 106, 17, 106, 19, 20, 14, 15, 2, 17, 106, 19, 20, 57, 58, 59, 106, 14, 15, 106, 14, 15, 19, 20, 106, 19, 20, 106, 106, 106, 106, 106, 106, 48, 106, 50, 106, 52, 106, 54, 48, 106, 50, 106, 52, 106, 54, 106, 106, 106, 106, 48, 106, 50, 48, 52, 50, 54, 52, 106, 54, 55, 106, 66, 106, 1, 106, 1, 71, 72, 106, 106, 75, 106, 77, 106, 106, 13, 81, 13, 106, 106, 106, 106, 106, 88, 89, 90, 106, 92, 24, 106, 28, 106, 28, 106, 106, 106, 106, 35, 106, 35, 66, 106, 40, 41, 42, 71, 72, 43, 106, 75, 106, 77, 106, 1, 106, 81, 106, 106, 106, 57, 58, 59, 88, 89, 90, 66, 92, 106, 106, 106, 71, 72, 106, 106, 75, 106, 77, 106, 1, 2, 81, 29, 106, 106, 106, 106, 106, 88, 89, 90, 66, 92, 40, 41, 42, 71, 72, 106, 106, 75, 106, 77, 106, 106, 106, 81, 106, 106, 106, 57, 58, 59, 88, 89, 90, 38, 92, 40, 41, 42, 106, 106, 106, 106, 106, 106, 106, 50, 106, 106, 106, 106, 66, 106, 57, 58, 59, 71, 72, 1, 106, 75, 106, 77, 106, 106, 106, 81, 106, 106, 106, 106, 106, 106, 88, 89, 90, 2, 92, 63, 64, 65, 66, 67, 68, 106, 28, 71, 106, 14, 15, 106, 2, 35, 19, 20, 106, 106, 40, 41, 42, 106, 106, 106, 14, 15, 106, 106, 106, 19, 20, 106, 106, 106, 106, 57, 58, 59, 106, 106, 106, 106, 106, 48, 13, 50, 1, 52, 106, 54, 106, 1, 106, 106, 23, 106, 25, 106, 48, 28, 50, 106, 52, 13, 54, 106, 35, 106, 37, 106, 39, 106, 1, 106, 106, 106, 106, 106, 106, 48, 106, 1, 106, 106, 106, 40, 41, 42, 106, 106, 40, 41, 42, 13, 1, 106, 106, 106, 106, 106, 55, 106, 57, 58, 59, 1, 13, 57, 58, 59, 39, 40, 41, 42, 106, 1, 106, 106, 106, 106, 40, 41, 42, 106, 106, 106, 106, 23, 57, 58, 59, 106, 106, 40, 41, 42, 1, 57, 58, 59, 106, 1, 106, 106, 40, 41, 42, 106, 106, 106, 57, 58, 59, 39, 40, 41, 42, 106, 106, 106, 106, 57, 58, 59, 106, 106, 106, 106, 106, 106, 106, 57, 58, 59, 106, 40, 41, 42, 1, 106, 40, 41, 42, 106, 106, 106, 106, 106, 106, 106, 13, 106, 57, 58, 59, 106, 61, 57, 58, 59, 106, 24, 106, 106, 106, 28, 106, 106, 106, 106, 106, 106, 35, 106, 106, 106, 106, 106, 106, 106, 43,);

    const YY_SHIFT_USE_DFLT = - 15;

    const YY_SHIFT_MAX = 242;

    static public $yy_shift_ofst = array(517, 409, 80, 80, 80, 315, 409, 315, - 14, - 14, 33, 174, 174, 80, 80, 80, 80, 80, 80, 80, 80, 80, 268, 80, 80, 80, 80, 80, 80, 127, 221, 80, 80, 80, 80, 80, 80, 362, 362, 456, 456, 456, 456, 456, 1690, 1582, 1826, 1826, 1826, 1826, 1826, 517, 988, 1952, 1962, 1983, 1919, 1557, 759, 1740, 1928, 1941, 1893, 1898, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 533, 1988, 1988, 941, 941, 1692, 2025, 244, 134, 270, 12, 1037, 89, - 5, 560, 560, 198, 198, 270, 270, 12, 546, 270, 12, 606, 109, 685, 152, 216, 178, 337, 65, 241, 326, 326, 1, 382, 385, 448, 385, 154, 472, 431, 463, 641, 1, 225, 193, 193, 193, 225, 193, 193, 193, 193, 193, - 15, 1611, 1632, 1618, 1843, 1858, 1629, 526, 481, 419, 290, 1, 1, 1, 43, 170, 43, 43, - 12, 43, 170, 114, 1, 114, 43, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 43, 114, 1, 114, 1, 400, 1, 43, 1, 1, 1, 294, 404, 193, 565, 193, 590, 193, 404, 225, 225, 193, 193, 225, - 15, - 15, - 15, - 15, - 15, 1765, 1879, 502, 35, 466, 96, 62, 284, 213, 295, 237, 168, 239, 273, 86, 329, 309, 333, 305, 424, 565, 564, 579, 595, 580, 524, 536, 514, 575, 563, 599, 609, 615, 613, 582, 608, 600, 605, 498, 212, 271, 591, 3, 352, 492, 490,);

    const YY_REDUCE_USE_DFLT = - 82;

    const YY_REDUCE_MAX = 196;

    static public $yy_reduce_ofst = array(1784, 488, 636, 521, 667, 551, 578, 607, 692, 774, 903, 1336, 1284, 1361, 1465, 1259, 1105, 1157, 1182, 1413, 876, 826, 851, 1028, 1080, 1207, 1053, 1234, 1438, 1388, 1311, 1130, 799, 749, 721, 1003, 952, 1515, 1490, 1687, 1623, 1662, 1712, 1754, - 30, 574, 603, 872, - 30, 1049, 1126, 85, 175, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, - 28, 252, - 28, - 28, - 28, - 28, 220, 220, 105, 32, - 62, - 16, 93, 346, 378, 475, 331, 291, 164, 299, 408, 508, 106, 410, 172, 285, 223, 133, 342, 223, 223, 402, 327, 402, 297, 342, - 68, 402, 348, 484, 388, 223, 340, 370, 223, 223, 473, 417, 223, 223, 223, 402, 223, 223, 223, 223, 531, 223, 587, 587, 587, 587, 587, 587, 192, 592, 587, 587, 573, 573, 573, 570, 601, 570, 570, 576, 570, 572, 577, 573, 571, 570, 570, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 570, 594, 573, 612, 573, 584, 573, 570, 573, 573, 573, 618, 311, 84, 616, 84, 437, 84, 311, - 81, - 81, 84, 84, - 81, 569, 532, 454, 548, 552,);

    static public $yyExpectedTokens = array(array(3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 21, 22, 27, 31, 33, 34,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 32, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 32, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 56, 60,), array(14, 15, 16, 18, 19, 21, 22, 27, 31, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 51, 53, 56, 60,), array(1, 13, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 26, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 28, 35, 40, 41, 42, 57, 58, 59,), array(1, 28, 35, 40, 41, 42, 57, 58, 59,), array(3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 21, 22, 27, 31, 33, 34,), array(6, 14, 15, 16, 18, 21, 22, 27, 31, 33, 34, 60, 61,), array(1, 23, 40, 41, 42, 57, 58, 59,), array(1, 39, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59, 61,), array(1, 39, 40, 41, 42, 57, 58, 59,), array(1, 2, 40, 41, 42, 57, 58, 59,), array(1, 13, 40, 41, 42, 57, 58, 59,), array(1, 29, 40, 41, 42, 57, 58, 59,), array(1, 13, 40, 41, 42, 57, 58, 59,), array(1, 13, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 55, 57, 58, 59,), array(1, 13, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 13, 20, 28, 35, 38, 50,), array(1, 40, 41, 42, 57, 58, 59,), array(1, 40, 41, 42, 57, 58, 59,), array(40, 41, 42, 57, 58, 59,), array(40, 41, 42, 57, 58, 59,), array(1, 13, 24, 28, 35, 43,), array(1, 13, 24, 28, 35, 43,), array(16, 19, 53, 56,), array(1, 13, 28, 35,), array(1, 28, 35,), array(16, 38, 56,), array(6, 14, 15, 16, 18, 21, 22, 27, 31, 33, 34, 60, 61,), array(14, 15, 19, 28, 30, 35,), array(14, 15, 19, 28, 30, 35,), array(14, 15, 19, 28, 35,), array(14, 15, 19, 28, 35,), array(1, 13, 28, 35,), array(1, 13, 28, 35,), array(1, 28, 35,), array(1, 28, 35,), array(16, 38, 56,), array(20, 48, 54,), array(1, 28, 35,), array(16, 38, 56,), array(1, 2,), array(1, 13, 28, 29, 35,), array(15, 16, 19, 56,), array(14, 15, 19, 52,), array(1, 13, 28, 35,), array(1, 13, 28, 35,), array(17, 20, 50,), array(10, 11, 12,), array(17, 20, 50,), array(14, 15, 19,), array(14, 15, 19,), array(28, 35,), array(20, 50,), array(16, 19,), array(1, 20,), array(16, 19,), array(1, 55,), array(16, 56,), array(28, 35,), array(1, 13,), array(1, 30,), array(28, 35,), array(20,), array(1,), array(1,), array(1,), array(20,), array(1,), array(1,), array(1,), array(1,), array(1,), array(), array(2, 14, 15, 17, 19, 20, 48, 50, 52, 54,), array(2, 14, 15, 19, 20, 48, 50, 52, 54, 55,), array(2, 14, 15, 17, 19, 20, 48, 50, 52, 54,), array(2, 14, 15, 19, 20, 48, 50, 52, 54,), array(2, 14, 15, 19, 20, 48, 50, 52, 54,), array(14, 15, 19, 20, 48, 50, 52, 54,), array(15, 16, 19, 36, 56,), array(14, 15, 19, 52,), array(14, 15, 19,), array(17, 48, 54,), array(28, 35,), array(28, 35,), array(28, 35,), array(48, 54,), array(48, 54,), array(48, 54,), array(48, 54,), array(15, 38,), array(48, 54,), array(48, 54,), array(16, 56,), array(28, 35,), array(16, 56,), array(48, 54,), array(48, 54,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(28, 35,), array(48, 54,), array(16, 56,), array(28, 35,), array(16, 56,), array(28, 35,), array(19, 51,), array(28, 35,), array(48, 54,), array(28, 35,), array(28, 35,), array(28, 35,), array(17, 24,), array(2,), array(1,), array(38,), array(1,), array(11,), array(1,), array(2,), array(20,), array(20,), array(1,), array(1,), array(20,), array(), array(), array(), array(), array(), array(1, 2, 38, 40, 41, 42, 50, 57, 58, 59,), array(13, 23, 25, 28, 35, 37, 39, 48,), array(13, 17, 28, 35, 38, 50,), array(38, 48, 50, 55,), array(14, 15, 19, 52,), array(24, 43, 61,), array(30, 38, 50,), array(24, 43, 55,), array(19, 52,), array(37, 55,), array(48, 55,), array(17, 48,), array(37, 39,), array(37, 39,), array(23, 37,), array(38, 50,), array(38, 50,), array(37, 39,), array(38, 50,), array(24, 43,), array(38,), array(48,), array(36,), array(19,), array(19,), array(19,), array(19,), array(53,), array(6,), array(53,), array(19,), array(24,), array(19,), array(25,), array(55,), array(13,), array(19,), array(19,), array(19,), array(44,), array(17,), array(55,), array(38,), array(36,), array(19,), array(39,), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),);

    static public $yy_default = array(342, 520, 500, 500, 500, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 404, 404, 380, 404, 404, 371, 339, 535, 535, 535, 535, 535, 535, 535, 409, 535, 535, 535, 535, 499, 521, 416, 411, 523, 406, 385, 522, 415, 409, 442, 498, 425, 430, 431, 432, 432, 535, 418, 404, 535, 535, 404, 404, 404, 404, 424, 449, 404, 404, 535, 512, 404, 535, 394, 418, 535, 465, 418, 418, 455, 535, 455, 465, 465, 404, 455, 535, 398, 535, 418, 535, 404, 418, 418, 382, 509, 421, 422, 428, 455, 418, 435, 433, 434, 400, 507, 454, 454, 454, 454, 454, 454, 535, 467, 465, 481, 383, 364, 377, 492, 458, 493, 490, 465, 459, 460, 535, 392, 535, 461, 491, 379, 388, 369, 368, 367, 387, 372, 378, 393, 375, 373, 366, 463, 535, 390, 535, 391, 535, 389, 462, 363, 381, 384, 535, 502, 401, 465, 424, 357, 449, 501, 513, 487, 395, 399, 510, 506, 465, 506, 506, 465, 442, 438, 442, 442, 466, 432, 442, 432, 535, 535, 438, 438, 535, 535, 535, 442, 535, 535, 450, 432, 481, 438, 440, 535, 535, 535, 535, 535, 348, 535, 535, 432, 535, 412, 445, 535, 535, 535, 535, 444, 535, 535, 511, 535, 535, 535, 345, 485, 340, 346, 495, 344, 343, 471, 496, 444, 341, 486, 358, 359, 405, 417, 403, 386, 360, 413, 361, 402, 374, 356, 355, 349, 350, 484, 508, 351, 352, 354, 353, 483, 481, 347, 503, 532, 426, 427, 448, 478, 451, 447, 446, 468, 488, 469, 470, 445, 476, 531, 497, 453, 482, 477, 457, 489, 452, 429, 514, 479, 515, 516, 423, 464, 420, 504, 456, 436, 518, 437, 519, 494, 397, 473, 474, 472, 475, 505, 517, 439, 525, 526, 524, 396, 419, 443, 441, 529, 534, 527, 533, 530, 528, 480,);

    const YYNOCODE = 107;

    const YYSTACKDEPTH = 500;

    const YYNSTATE = 339;

    const YYNRULE = 196;

    const YYERRORSYMBOL = 62;

    const YYERRSYMDT = 'yy0';

    const YYFALLBACK = 0;

    public static $yyFallback = array();

    public function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
    }

    public function PrintTrace()
    {
        $this->yyTraceFILE = fopen('php://output', 'w');
        $this->yyTracePrompt = '<br>';
    }

    public $yyTraceFILE;

    public $yyTracePrompt;

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array('$', 'VERT', 'COLON', 'COMMENT', 'PHP', 'XMLTAG', 'TEXT', 'STRIPON', 'STRIPOFF', 'BLOCKSOURCE', 'LITERALSTART', 'LITERALEND', 'LITERAL', 'RDEL', 'SIMPELOUTPUT', 'LDEL', 'DOLLARID', 'EQUAL', 'SIMPLETAG', 'ID', 'PTR', 'LDELIF', 'LDELFOR', 'SEMICOLON', 'INCDEC', 'TO', 'STEP', 'LDELFOREACH', 'SPACE', 'AS', 'APTR', 'LDELSETFILTER', 'SMARTYBLOCKCHILDPARENT', 'CLOSETAG', 'LDELSLASH', 'ATTR', 'INTEGER', 'COMMA', 'OPENP', 'CLOSEP', 'MATH', 'UNIMATH', 'ISIN', 'INSTANCEOF', 'QMARK', 'NOT', 'TYPECAST', 'HEX', 'DOT', 'SINGLEQUOTESTRING', 'DOUBLECOLON', 'NAMESPACE', 'AT', 'HATCH', 'OPENB', 'CLOSEB', 'DOLLAR', 'LOGOP', 'TLOGOP', 'SINGLECOND', 'QUOTE', 'BACKTICK', 'error', 'start', 'template', 'template_element', 'smartytag', 'literal', 'text_content', 'literal_elements', 'literal_element', 'tag', 'variable', 'modifierlist', 'attributes', 'value', 'expr', 'varindexed', 'statement', 'statements', 'foraction', 'varvar', 'modparameters', 'attribute', 'ternary', 'array', 'lop', 'scond', 'ns1', 'function', 'doublequoted_with_quotes', 'static_class_access', 'object', 'arrayindex', 'indexdef', 'varvarele', 'objectchain', 'objectelement', 'method', 'params', 'modifier', 'modparameter', 'arrayelements', 'arrayelement', 'doublequoted', 'doublequotedcontent',);

    public static $yyRuleName = array('start ::= template', 'template ::= template_element', 'template ::= template template_element', 'template ::=', 'template_element ::= smartytag', 'template_element ::= COMMENT', 'template_element ::= literal', 'template_element ::= PHP', 'template_element ::= XMLTAG', 'template_element ::= text_content', 'text_content ::= TEXT', 'text_content ::= text_content TEXT', 'template_element ::= STRIPON', 'template_element ::= STRIPOFF', 'template_element ::= BLOCKSOURCE', 'literal ::= LITERALSTART LITERALEND', 'literal ::= LITERALSTART literal_elements LITERALEND', 'literal_elements ::= literal_elements literal_element', 'literal_elements ::=', 'literal_element ::= literal', 'literal_element ::= LITERAL', 'smartytag ::= tag RDEL', 'smartytag ::= SIMPELOUTPUT', 'tag ::= LDEL variable', 'tag ::= LDEL variable modifierlist attributes', 'tag ::= LDEL variable attributes', 'tag ::= LDEL value', 'tag ::= LDEL value modifierlist attributes', 'tag ::= LDEL value attributes', 'tag ::= LDEL expr modifierlist attributes', 'tag ::= LDEL expr attributes', 'tag ::= LDEL DOLLARID EQUAL value', 'tag ::= LDEL DOLLARID EQUAL expr', 'tag ::= LDEL DOLLARID EQUAL expr attributes', 'tag ::= LDEL varindexed EQUAL expr attributes', 'smartytag ::= SIMPLETAG', 'tag ::= LDEL ID attributes', 'tag ::= LDEL ID', 'tag ::= LDEL ID modifierlist attributes', 'tag ::= LDEL ID PTR ID attributes', 'tag ::= LDEL ID PTR ID modifierlist attributes', 'tag ::= LDELIF expr', 'tag ::= LDELIF expr attributes', 'tag ::= LDELIF statement', 'tag ::= LDELIF statement attributes', 'tag ::= LDELFOR statements SEMICOLON expr SEMICOLON varindexed foraction attributes', 'foraction ::= EQUAL expr', 'foraction ::= INCDEC', 'tag ::= LDELFOR statement TO expr attributes', 'tag ::= LDELFOR statement TO expr STEP expr attributes', 'tag ::= LDELFOREACH attributes', 'tag ::= LDELFOREACH SPACE value AS varvar attributes', 'tag ::= LDELFOREACH SPACE value AS varvar APTR varvar attributes', 'tag ::= LDELFOREACH SPACE expr AS varvar attributes', 'tag ::= LDELFOREACH SPACE expr AS varvar APTR varvar attributes', 'tag ::= LDELSETFILTER ID modparameters', 'tag ::= LDELSETFILTER ID modparameters modifierlist', 'tag ::= LDEL SMARTYBLOCKCHILDPARENT', 'smartytag ::= CLOSETAG', 'tag ::= LDELSLASH ID', 'tag ::= LDELSLASH ID modifierlist', 'tag ::= LDELSLASH ID PTR ID', 'tag ::= LDELSLASH ID PTR ID modifierlist', 'attributes ::= attributes attribute', 'attributes ::= attribute', 'attributes ::=', 'attribute ::= SPACE ID EQUAL ID', 'attribute ::= ATTR expr', 'attribute ::= ATTR value', 'attribute ::= SPACE ID', 'attribute ::= SPACE expr', 'attribute ::= SPACE value', 'attribute ::= SPACE INTEGER EQUAL expr', 'statements ::= statement', 'statements ::= statements COMMA statement', 'statement ::= DOLLARID EQUAL INTEGER', 'statement ::= DOLLARID EQUAL expr', 'statement ::= varindexed EQUAL expr', 'statement ::= OPENP statement CLOSEP', 'expr ::= value', 'expr ::= ternary', 'expr ::= DOLLARID COLON ID', 'expr ::= expr MATH value', 'expr ::= expr UNIMATH value', 'expr ::= array', 'expr ::= expr modifierlist', 'expr ::= expr lop expr', 'expr ::= expr scond', 'expr ::= expr ISIN array', 'expr ::= expr ISIN value', 'expr ::= variable INSTANCEOF ns1', 'ternary ::= OPENP expr CLOSEP QMARK DOLLARID COLON expr', 'ternary ::= OPENP expr CLOSEP QMARK expr COLON expr', 'value ::= variable', 'value ::= UNIMATH value', 'value ::= NOT value', 'value ::= TYPECAST value', 'value ::= variable INCDEC', 'value ::= HEX', 'value ::= INTEGER', 'value ::= INTEGER DOT INTEGER', 'value ::= INTEGER DOT', 'value ::= DOT INTEGER', 'value ::= ID', 'value ::= function', 'value ::= OPENP expr CLOSEP', 'value ::= SINGLEQUOTESTRING', 'value ::= doublequoted_with_quotes', 'value ::= varindexed DOUBLECOLON static_class_access', 'value ::= smartytag', 'value ::= value modifierlist', 'value ::= NAMESPACE', 'value ::= ns1 DOUBLECOLON static_class_access', 'ns1 ::= ID', 'ns1 ::= NAMESPACE', 'variable ::= DOLLARID', 'variable ::= varindexed', 'variable ::= varvar AT ID', 'variable ::= object', 'variable ::= HATCH ID HATCH', 'variable ::= HATCH ID HATCH arrayindex', 'variable ::= HATCH variable HATCH', 'variable ::= HATCH variable HATCH arrayindex', 'varindexed ::= DOLLARID arrayindex', 'varindexed ::= varvar arrayindex', 'arrayindex ::= arrayindex indexdef', 'arrayindex ::=', 'indexdef ::= DOT DOLLARID', 'indexdef ::= DOT varvar', 'indexdef ::= DOT varvar AT ID', 'indexdef ::= DOT ID', 'indexdef ::= DOT INTEGER', 'indexdef ::= DOT LDEL expr RDEL', 'indexdef ::= OPENB ID CLOSEB', 'indexdef ::= OPENB ID DOT ID CLOSEB', 'indexdef ::= OPENB SINGLEQUOTESTRING CLOSEB', 'indexdef ::= OPENB INTEGER CLOSEB', 'indexdef ::= OPENB DOLLARID CLOSEB', 'indexdef ::= OPENB variable CLOSEB', 'indexdef ::= OPENB value CLOSEB', 'indexdef ::= OPENB expr CLOSEB', 'indexdef ::= OPENB CLOSEB', 'varvar ::= DOLLARID', 'varvar ::= DOLLAR', 'varvar ::= varvar varvarele', 'varvarele ::= ID', 'varvarele ::= SIMPELOUTPUT', 'varvarele ::= LDEL expr RDEL', 'object ::= varindexed objectchain', 'objectchain ::= objectelement', 'objectchain ::= objectchain objectelement', 'objectelement ::= PTR ID arrayindex', 'objectelement ::= PTR varvar arrayindex', 'objectelement ::= PTR LDEL expr RDEL arrayindex', 'objectelement ::= PTR ID LDEL expr RDEL arrayindex', 'objectelement ::= PTR method', 'function ::= ns1 OPENP params CLOSEP', 'method ::= ID OPENP params CLOSEP', 'method ::= DOLLARID OPENP params CLOSEP', 'params ::= params COMMA expr', 'params ::= expr', 'params ::=', 'modifierlist ::= modifierlist modifier modparameters', 'modifierlist ::= modifier modparameters', 'modifier ::= VERT AT ID', 'modifier ::= VERT ID', 'modparameters ::= modparameters modparameter', 'modparameters ::=', 'modparameter ::= COLON value', 'modparameter ::= COLON array', 'static_class_access ::= method', 'static_class_access ::= method objectchain', 'static_class_access ::= ID', 'static_class_access ::= DOLLARID arrayindex', 'static_class_access ::= DOLLARID arrayindex objectchain', 'lop ::= LOGOP', 'lop ::= TLOGOP', 'scond ::= SINGLECOND', 'array ::= OPENB arrayelements CLOSEB', 'arrayelements ::= arrayelement', 'arrayelements ::= arrayelements COMMA arrayelement', 'arrayelements ::=', 'arrayelement ::= value APTR expr', 'arrayelement ::= ID APTR expr', 'arrayelement ::= expr', 'doublequoted_with_quotes ::= QUOTE QUOTE', 'doublequoted_with_quotes ::= QUOTE doublequoted QUOTE', 'doublequoted ::= doublequoted doublequotedcontent', 'doublequoted ::= doublequotedcontent', 'doublequotedcontent ::= BACKTICK variable BACKTICK', 'doublequotedcontent ::= BACKTICK expr BACKTICK', 'doublequotedcontent ::= DOLLARID', 'doublequotedcontent ::= LDEL variable RDEL', 'doublequotedcontent ::= LDEL expr RDEL', 'doublequotedcontent ::= smartytag', 'doublequotedcontent ::= TEXT',);

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:
                break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (empty($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE, $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] . "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx --;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        static $res3 = array();
        static $res4 = array();
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (isset($res3[$state][$token])) {
            if ($res3[$state][$token]) {
                return $expected;
            }
        } else {
            if ($res3[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return $expected;
            }
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done ++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno][0]);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                        if (isset($res4[$nextstate][$token])) {
                            if ($res4[$nextstate][$token]) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        } else {
                            if ($res4[$nextstate][$token] = in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx ++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        static $res = array();
        static $res2 = array();
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (isset($res[$state][$token])) {
            if ($res[$state][$token]) {
                return true;
            }
        } else {
            if ($res[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return true;
            }
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done ++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno][0]);
                    if (isset($res2[$nextstate][$token])) {
                        if ($res2[$nextstate][$token]) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    } else {
                        if ($res2[$nextstate][$token] = (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true))) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx ++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

    public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " . $this->yyTokenName[$iLookAhead] . " => " . $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx ++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx --;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            #line 203 "../smarty/lexer/smarty_internal_templateparser.y"

            $this->internalError = true;
            $this->compiler->trigger_template_error("Stack overflow in template parser");

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        $this->yystack[] = $yytos;
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt, $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i ++) {
                fprintf($this->yyTraceFILE, " %s", $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE, "\n");
        }
    }

    public static $yyRuleInfo = array(array(0 => 63, 1 => 1), array(0 => 64, 1 => 1), array(0 => 64, 1 => 2), array(0 => 64, 1 => 0), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 68, 1 => 1), array(0 => 68, 1 => 2), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 65, 1 => 1), array(0 => 67, 1 => 2), array(0 => 67, 1 => 3), array(0 => 69, 1 => 2), array(0 => 69, 1 => 0), array(0 => 70, 1 => 1), array(0 => 70, 1 => 1), array(0 => 66, 1 => 2), array(0 => 66, 1 => 1), array(0 => 71, 1 => 2), array(0 => 71, 1 => 4), array(0 => 71, 1 => 3), array(0 => 71, 1 => 2), array(0 => 71, 1 => 4), array(0 => 71, 1 => 3), array(0 => 71, 1 => 4), array(0 => 71, 1 => 3), array(0 => 71, 1 => 4), array(0 => 71, 1 => 4), array(0 => 71, 1 => 5), array(0 => 71, 1 => 5), array(0 => 66, 1 => 1), array(0 => 71, 1 => 3), array(0 => 71, 1 => 2), array(0 => 71, 1 => 4), array(0 => 71, 1 => 5), array(0 => 71, 1 => 6), array(0 => 71, 1 => 2), array(0 => 71, 1 => 3), array(0 => 71, 1 => 2), array(0 => 71, 1 => 3), array(0 => 71, 1 => 8), array(0 => 80, 1 => 2), array(0 => 80, 1 => 1), array(0 => 71, 1 => 5), array(0 => 71, 1 => 7), array(0 => 71, 1 => 2), array(0 => 71, 1 => 6), array(0 => 71, 1 => 8), array(0 => 71, 1 => 6), array(0 => 71, 1 => 8), array(0 => 71, 1 => 3), array(0 => 71, 1 => 4), array(0 => 71, 1 => 2), array(0 => 66, 1 => 1), array(0 => 71, 1 => 2), array(0 => 71, 1 => 3), array(0 => 71, 1 => 4), array(0 => 71, 1 => 5), array(0 => 74, 1 => 2), array(0 => 74, 1 => 1), array(0 => 74, 1 => 0), array(0 => 83, 1 => 4), array(0 => 83, 1 => 2), array(0 => 83, 1 => 2), array(0 => 83, 1 => 2), array(0 => 83, 1 => 2), array(0 => 83, 1 => 2), array(0 => 83, 1 => 4), array(0 => 79, 1 => 1), array(0 => 79, 1 => 3), array(0 => 78, 1 => 3), array(0 => 78, 1 => 3), array(0 => 78, 1 => 3), array(0 => 78, 1 => 3), array(0 => 76, 1 => 1), array(0 => 76, 1 => 1), array(0 => 76, 1 => 3), array(0 => 76, 1 => 3), array(0 => 76, 1 => 3), array(0 => 76, 1 => 1), array(0 => 76, 1 => 2), array(0 => 76, 1 => 3), array(0 => 76, 1 => 2), array(0 => 76, 1 => 3), array(0 => 76, 1 => 3), array(0 => 76, 1 => 3), array(0 => 84, 1 => 7), array(0 => 84, 1 => 7), array(0 => 75, 1 => 1), array(0 => 75, 1 => 2), array(0 => 75, 1 => 2), array(0 => 75, 1 => 2), array(0 => 75, 1 => 2), array(0 => 75, 1 => 1), array(0 => 75, 1 => 1), array(0 => 75, 1 => 3), array(0 => 75, 1 => 2), array(0 => 75, 1 => 2), array(0 => 75, 1 => 1), array(0 => 75, 1 => 1), array(0 => 75, 1 => 3), array(0 => 75, 1 => 1), array(0 => 75, 1 => 1), array(0 => 75, 1 => 3), array(0 => 75, 1 => 1), array(0 => 75, 1 => 2), array(0 => 75, 1 => 1), array(0 => 75, 1 => 3), array(0 => 88, 1 => 1), array(0 => 88, 1 => 1), array(0 => 72, 1 => 1), array(0 => 72, 1 => 1), array(0 => 72, 1 => 3), array(0 => 72, 1 => 1), array(0 => 72, 1 => 3), array(0 => 72, 1 => 4), array(0 => 72, 1 => 3), array(0 => 72, 1 => 4), array(0 => 77, 1 => 2), array(0 => 77, 1 => 2), array(0 => 93, 1 => 2), array(0 => 93, 1 => 0), array(0 => 94, 1 => 2), array(0 => 94, 1 => 2), array(0 => 94, 1 => 4), array(0 => 94, 1 => 2), array(0 => 94, 1 => 2), array(0 => 94, 1 => 4), array(0 => 94, 1 => 3), array(0 => 94, 1 => 5), array(0 => 94, 1 => 3), array(0 => 94, 1 => 3), array(0 => 94, 1 => 3), array(0 => 94, 1 => 3), array(0 => 94, 1 => 3), array(0 => 94, 1 => 3), array(0 => 94, 1 => 2), array(0 => 81, 1 => 1), array(0 => 81, 1 => 1), array(0 => 81, 1 => 2), array(0 => 95, 1 => 1), array(0 => 95, 1 => 1), array(0 => 95, 1 => 3), array(0 => 92, 1 => 2), array(0 => 96, 1 => 1), array(0 => 96, 1 => 2), array(0 => 97, 1 => 3), array(0 => 97, 1 => 3), array(0 => 97, 1 => 5), array(0 => 97, 1 => 6), array(0 => 97, 1 => 2), array(0 => 89, 1 => 4), array(0 => 98, 1 => 4), array(0 => 98, 1 => 4), array(0 => 99, 1 => 3), array(0 => 99, 1 => 1), array(0 => 99, 1 => 0), array(0 => 73, 1 => 3), array(0 => 73, 1 => 2), array(0 => 100, 1 => 3), array(0 => 100, 1 => 2), array(0 => 82, 1 => 2), array(0 => 82, 1 => 0), array(0 => 101, 1 => 2), array(0 => 101, 1 => 2), array(0 => 91, 1 => 1), array(0 => 91, 1 => 2), array(0 => 91, 1 => 1), array(0 => 91, 1 => 2), array(0 => 91, 1 => 3), array(0 => 86, 1 => 1), array(0 => 86, 1 => 1), array(0 => 87, 1 => 1), array(0 => 85, 1 => 3), array(0 => 102, 1 => 1), array(0 => 102, 1 => 3), array(0 => 102, 1 => 0), array(0 => 103, 1 => 3), array(0 => 103, 1 => 3), array(0 => 103, 1 => 1), array(0 => 90, 1 => 2), array(0 => 90, 1 => 3), array(0 => 104, 1 => 2), array(0 => 104, 1 => 1), array(0 => 105, 1 => 3), array(0 => 105, 1 => 3), array(0 => 105, 1 => 1), array(0 => 105, 1 => 3), array(0 => 105, 1 => 3), array(0 => 105, 1 => 1), array(0 => 105, 1 => 1),);

    public static $yyReduceMap = array(0 => 0, 1 => 1, 2 => 2, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 19 => 10, 20 => 10, 47 => 10, 70 => 10, 71 => 10, 79 => 10, 80 => 10, 84 => 10, 93 => 10, 98 => 10, 99 => 10, 104 => 10, 106 => 10, 107 => 10, 111 => 10, 113 => 10, 114 => 10, 118 => 10, 179 => 10, 184 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 18 => 15, 16 => 16, 78 => 16, 17 => 17, 94 => 17, 96 => 17, 97 => 17, 125 => 17, 21 => 21, 22 => 22, 23 => 23, 26 => 23, 24 => 24, 27 => 24, 25 => 25, 28 => 25, 30 => 25, 29 => 29, 31 => 31, 32 => 31, 33 => 33, 34 => 34, 35 => 35, 36 => 36, 37 => 37, 38 => 38, 39 => 39, 40 => 40, 41 => 41, 42 => 42, 44 => 42, 43 => 43, 45 => 45, 46 => 46, 48 => 48, 49 => 49, 50 => 50, 51 => 51, 53 => 51, 52 => 52, 54 => 52, 55 => 55, 56 => 56, 57 => 57, 58 => 58, 59 => 59, 60 => 60, 61 => 61, 62 => 62, 63 => 63, 64 => 64, 73 => 64, 160 => 64, 164 => 64, 168 => 64, 169 => 64, 65 => 65, 161 => 65, 167 => 65, 66 => 66, 67 => 67, 68 => 67, 69 => 69, 145 => 69, 72 => 72, 74 => 74, 75 => 75, 76 => 75, 77 => 77, 81 => 81, 82 => 82, 83 => 82, 85 => 85, 110 => 85, 86 => 86, 87 => 87, 88 => 88, 89 => 89, 90 => 90, 91 => 91, 92 => 92, 95 => 95, 100 => 100, 101 => 101, 102 => 102, 103 => 103, 105 => 105, 108 => 108, 109 => 109, 112 => 112, 115 => 115, 116 => 116, 117 => 117, 119 => 119, 120 => 120, 121 => 121, 122 => 122, 123 => 123, 124 => 124, 126 => 126, 181 => 126, 127 => 127, 128 => 128, 129 => 129, 130 => 130, 131 => 131, 132 => 132, 140 => 132, 133 => 133, 134 => 134, 135 => 135, 136 => 135, 138 => 135, 139 => 135, 137 => 137, 141 => 141, 142 => 142, 143 => 143, 185 => 143, 144 => 144, 146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151, 152 => 152, 153 => 153, 154 => 154, 155 => 155, 156 => 156, 157 => 157, 158 => 158, 159 => 159, 162 => 162, 163 => 163, 165 => 165, 166 => 166, 170 => 170, 171 => 171, 172 => 172, 173 => 173, 174 => 174, 175 => 175, 176 => 176, 177 => 177, 178 => 178, 180 => 180, 182 => 182, 183 => 183, 186 => 186, 187 => 187, 188 => 188, 189 => 189, 190 => 189, 192 => 189, 191 => 191, 193 => 193, 194 => 194, 195 => 195,);

    #line 214 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r0()
    {
        $this->_retvalue = $this->root_buffer->to_smarty_php();
    }

    #line 222 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r1()
    {
        if ($this->yystack[$this->yyidx + 0]->minor != null) {
            $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 229 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r2()
    {
        if ($this->yystack[$this->yyidx + 0]->minor != null) {
            // because of possible code injection
            $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 243 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r4()
    {
        if ($this->compiler->has_code) {
            $this->_retvalue = $this->mergePrefixCode($this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = null;
        }
        $this->compiler->has_variable_string = false;
        $this->block_nesting_level = count($this->compiler->_tag_stack);
    }

    #line 254 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r5()
    {
        $this->_retvalue = null;
    }

    #line 259 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r6()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 263 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r7()
    {
        $code = $this->compiler->compileTag('private_php', array(array('code' => $this->yystack[$this->yyidx + 0]->minor), array('type' => $this->lex->phpType)), array());
        if ($this->compiler->has_code && !empty($code)) {
            $tmp = '';
            foreach ($this->compiler->prefix_code as $code) {
                $tmp .= $code;
            }
            $this->compiler->prefix_code = array();
            $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp . $code, true));
        } else {
            $this->_retvalue = null;
        }
    }

    #line 276 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r8()
    {
        $this->compiler->tag_nocache = true;
        $xml = $this->yystack[$this->yyidx + 0]->minor;
        $save = $this->template->has_nocache_code;
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode("<?php echo '{$xml}';?>", $this->compiler, true));
        $this->template->has_nocache_code = $save;
    }

    #line 285 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r9()
    {
        $this->_retvalue = $this->compiler->processText($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 289 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r10()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 293 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r11()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 298 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r12()
    {
        $this->strip = true;
    }

    #line 302 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r13()
    {
        $this->strip = false;
    }

    #line 306 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r14()
    {
        if ($this->strip) {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
        } else {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 315 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r15()
    {
        $this->_retvalue = '';
    }

    #line 319 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r16()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 323 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r17()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 339 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r21()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 345 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r22()
    {
        $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' $');
        if (preg_match('/^(.*)(\s+nocache)$/', $var, $match)) {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array('nocache'), array('value' => $this->compiler->compileVariable('\'' . $match[1] . '\'')));
        } else {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->compiler->compileVariable('\'' . $var . '\'')));
        }
    }

    #line 355 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r23()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 359 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r24()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 363 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r25()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 377 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r29()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 390 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r31()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array(array('value' => $this->yystack[$this->yyidx + 0]->minor), array('var' => '\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'')));
    }

    #line 398 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r33()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array_merge(array(array('value' => $this->yystack[$this->yyidx + - 1]->minor), array('var' => '\'' . substr($this->yystack[$this->yyidx + - 3]->minor, 1) . '\'')), $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 402 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r34()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array_merge(array(array('value' => $this->yystack[$this->yyidx + - 1]->minor), array('var' => $this->yystack[$this->yyidx + - 3]->minor['var'])), $this->yystack[$this->yyidx + 0]->minor), array('smarty_internal_index' => $this->yystack[$this->yyidx + - 3]->minor['smarty_internal_index']));
    }

    #line 407 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r35()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length));
        if ($tag == 'strip') {
            $this->strip = true;
            $this->_retvalue = null;;
        } else {
            if (defined($tag)) {
                if (isset($this->smarty->security_policy)) {
                    $this->smarty->security_policy->isTrustedConstant($tag, $this->compiler);
                }
                $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $tag));
            } else {
                if (preg_match('/^(.*)(\s+nocache)$/', $tag, $match)) {
                    $this->_retvalue = $this->compiler->compileTag($match[1], array('nocache'));
                } else {
                    $this->_retvalue = $this->compiler->compileTag($tag, array());
                }
            }
        }
    }

    #line 429 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r36()
    {
        if (defined($this->yystack[$this->yyidx + - 1]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + - 1]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 1]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 439 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r37()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->yystack[$this->yyidx + 0]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor, array());
        }
    }

    #line 452 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r38()
    {
        if (defined($this->yystack[$this->yyidx + - 2]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + - 2]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
        } else {
            $this->_retvalue = '<?php ob_start();?>' . $this->compiler->compileTag($this->yystack[$this->yyidx + - 2]->minor, $this->yystack[$this->yyidx + 0]->minor) . '<?php echo ';
            $this->_retvalue .= $this->compiler->compileTag('private_modifier', array(), array('modifierlist' => $this->yystack[$this->yyidx + - 1]->minor, 'value' => 'ob_get_clean()')) . ';?>';
        }
    }

    #line 465 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r39()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 3]->minor, $this->yystack[$this->yyidx + 0]->minor, array('object_method' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 470 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r40()
    {
        $this->_retvalue = '<?php ob_start();?>' . $this->compiler->compileTag($this->yystack[$this->yyidx + - 4]->minor, $this->yystack[$this->yyidx + 0]->minor, array('object_method' => $this->yystack[$this->yyidx + - 2]->minor)) . '<?php echo ';
        $this->_retvalue .= $this->compiler->compileTag('private_modifier', array(), array('modifierlist' => $this->yystack[$this->yyidx + - 1]->minor, 'value' => 'ob_get_clean()')) . ';?>';
    }

    #line 476 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r41()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 1]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, array(), array('if condition' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 481 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r42()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 2]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, $this->yystack[$this->yyidx + 0]->minor, array('if condition' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 486 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r43()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 1]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, array(), array('if condition' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 497 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r45()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 6]->minor), array('ifexp' => $this->yystack[$this->yyidx + - 4]->minor), array('var' => $this->yystack[$this->yyidx + - 2]->minor), array('step' => $this->yystack[$this->yyidx + - 1]->minor))), 1);
    }

    #line 501 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r46()
    {
        $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 509 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r48()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 3]->minor), array('to' => $this->yystack[$this->yyidx + - 1]->minor))), 0);
    }

    #line 513 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r49()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 5]->minor), array('to' => $this->yystack[$this->yyidx + - 3]->minor), array('step' => $this->yystack[$this->yyidx + - 1]->minor))), 0);
    }

    #line 518 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r50()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 523 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r51()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + - 3]->minor), array('item' => $this->yystack[$this->yyidx + - 1]->minor))));
    }

    #line 527 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r52()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + - 5]->minor), array('item' => $this->yystack[$this->yyidx + - 1]->minor), array('key' => $this->yystack[$this->yyidx + - 3]->minor))));
    }

    #line 540 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r55()
    {
        $this->_retvalue = $this->compiler->compileTag('setfilter', array(), array('modifier_list' => array(array_merge(array($this->yystack[$this->yyidx + - 1]->minor), $this->yystack[$this->yyidx + 0]->minor))));
    }

    #line 544 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r56()
    {
        $this->_retvalue = $this->compiler->compileTag('setfilter', array(), array('modifier_list' => array_merge(array(array_merge(array($this->yystack[$this->yyidx + - 2]->minor), $this->yystack[$this->yyidx + - 1]->minor)), $this->yystack[$this->yyidx + 0]->minor)));
    }

    #line 549 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r57()
    {
        $j = strrpos($this->yystack[$this->yyidx + 0]->minor, '.');
        if ($this->yystack[$this->yyidx + 0]->minor[$j + 1] == 'c') {
            // {$smarty.block.child}
            $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
        } else {
            // {$smarty.block.parent}
            $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
        }
    }

    #line 562 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r58()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' /');
        if ($tag == 'strip') {
            $this->strip = false;
            $this->_retvalue = null;
        } else {
            $this->_retvalue = $this->compiler->compileTag($tag . 'close', array());
        }
    }

    #line 571 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r59()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }

    #line 575 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r60()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 1]->minor . 'close', array(), array('modifier_list' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 580 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r61()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 2]->minor . 'close', array(), array('object_method' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 584 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r62()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 3]->minor . 'close', array(), array('object_method' => $this->yystack[$this->yyidx + - 1]->minor, 'modifier_list' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 592 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r63()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 598 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r64()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 603 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r65()
    {
        $this->_retvalue = array();
    }

    #line 608 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r66()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => $this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'');
        }
    }

    #line 619 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r67()
    {
        $this->_retvalue = array(trim($this->yystack[$this->yyidx + - 1]->minor, " =\n\r\t") => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 627 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r69()
    {
        $this->_retvalue = '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'';
    }

    #line 639 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r72()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 652 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r74()
    {
        $this->yystack[$this->yyidx + - 2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor;
    }

    #line 657 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r75()
    {
        $this->_retvalue = array('var' => '\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'', 'value' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 664 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r77()
    {
        $this->_retvalue = array('var' => $this->yystack[$this->yyidx + - 2]->minor, 'value' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 688 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r81()
    {
        $this->_retvalue = '$_smarty_tpl->getStreamVariable(\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '://' . $this->yystack[$this->yyidx + 0]->minor . '\')';
    }

    #line 693 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r82()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . trim($this->yystack[$this->yyidx + - 1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 707 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r85()
    {
        $this->_retvalue = $this->compiler->compileTag('private_modifier', array(), array('value' => $this->yystack[$this->yyidx + - 1]->minor, 'modifierlist' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 713 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r86()
    {
        $this->_retvalue = (isset($this->yystack[$this->yyidx + - 1]->minor['pre']) ? $this->yystack[$this->yyidx + - 1]->minor['pre'] : '') . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + - 1]->minor['op'] . $this->yystack[$this->yyidx + 0]->minor . (isset($this->yystack[$this->yyidx + - 1]->minor['pre']) ? ')' : '');
    }

    #line 716 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r87()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 720 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r88()
    {
        $this->_retvalue = 'in_array(' . $this->yystack[$this->yyidx + - 2]->minor . ',' . $this->yystack[$this->yyidx + 0]->minor . ')';
    }

    #line 724 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r89()
    {
        $this->_retvalue = 'in_array(' . $this->yystack[$this->yyidx + - 2]->minor . ',(array)' . $this->yystack[$this->yyidx + 0]->minor . ')';
    }

    #line 728 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r90()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 736 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r91()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 5]->minor . ' ? ' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'') . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 740 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r92()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 5]->minor . ' ? ' . $this->yystack[$this->yyidx + - 2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 755 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r95()
    {
        $this->_retvalue = '!' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 776 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r100()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 780 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r101()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . '.';
    }

    #line 784 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r102()
    {
        $this->_retvalue = '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 789 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r103()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'';
        }
    }

    #line 806 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r105()
    {
        $this->_retvalue = "(" . $this->yystack[$this->yyidx + - 1]->minor . ")";
    }

    #line 821 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r108()
    {
        self::$prefix_number ++;
        if ($this->yystack[$this->yyidx + - 2]->minor['var'] == '\'smarty\'') {
            $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . ' = ' . $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + - 2]->minor['smarty_internal_index']) . ';?>';
        } else {
            $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . ' = ' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 2]->minor['var']) . $this->yystack[$this->yyidx + - 2]->minor['smarty_internal_index'] . ';?>';
        }
        $this->_retvalue = '$_tmp' . self::$prefix_number . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
    }

    #line 832 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r109()
    {
        self::$prefix_number ++;
        $tmp = $this->compiler->appendCode('<?php ob_start();?>', $this->yystack[$this->yyidx + 0]->minor);
        $this->compiler->prefix_code[] = $this->compiler->appendCode($tmp, '<?php $_tmp' . self::$prefix_number . '=ob_get_clean();?>');
        $this->_retvalue = '$_tmp' . self::$prefix_number;
    }

    #line 849 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r112()
    {
        if (!in_array(strtolower($this->yystack[$this->yyidx + - 2]->minor), array('self', 'parent')) && (!$this->security || $this->smarty->security_policy->isTrustedStaticClassAccess($this->yystack[$this->yyidx + - 2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->compiler))) {
            if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + - 2]->minor])) {
                $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + - 2]->minor] . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
            }
        } else {
            $this->compiler->trigger_template_error("static class '" . $this->yystack[$this->yyidx + - 2]->minor . "' is undefined or not allowed by security setting");
        }
    }

    #line 883 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r115()
    {
        $this->_retvalue = $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'');
    }

    #line 886 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r116()
    {
        if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') {
            $smarty_var = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']);
            $this->_retvalue = $smarty_var;
        } else {
            // used for array reset,next,prev,end,current 
            $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var'];
            $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
            $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']) . $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
        }
    }

    #line 899 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r117()
    {
        $this->_retvalue = '$_smarty_tpl->tpl_vars[' . $this->yystack[$this->yyidx + - 2]->minor . ']->' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 909 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r119()
    {
        $this->_retvalue = '$_smarty_tpl->getConfigVariable( \'' . $this->yystack[$this->yyidx + - 1]->minor . '\')';
    }

    #line 913 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r120()
    {
        $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( \'' . $this->yystack[$this->yyidx + - 2]->minor . '\')) ? $tmp' . $this->yystack[$this->yyidx + 0]->minor . ' :null)';
    }

    #line 917 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r121()
    {
        $this->_retvalue = '$_smarty_tpl->getConfigVariable( ' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 921 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r122()
    {
        $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( ' . $this->yystack[$this->yyidx + - 2]->minor . ')) ? $tmp' . $this->yystack[$this->yyidx + 0]->minor . ' : null)';
    }

    #line 925 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r123()
    {
        $this->_retvalue = array('var' => '\'' . substr($this->yystack[$this->yyidx + - 1]->minor, 1) . '\'', 'smarty_internal_index' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 928 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r124()
    {
        $this->_retvalue = array('var' => $this->yystack[$this->yyidx + - 1]->minor, 'smarty_internal_index' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 941 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r126()
    {
        return;
    }

    #line 947 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r127()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'') . ']';
    }

    #line 950 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r128()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor) . ']';
    }

    #line 954 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r129()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 2]->minor) . '->' . $this->yystack[$this->yyidx + 0]->minor . ']';
    }

    #line 958 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r130()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if (isset($this->smarty->security_policy)) {
                $this->smarty->security_policy->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = '[' . $this->yystack[$this->yyidx + 0]->minor . ']';
        } else {
            $this->_retvalue = "['" . $this->yystack[$this->yyidx + 0]->minor . "']";
        }
    }

    #line 969 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r131()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + 0]->minor . ']';
    }

    #line 974 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r132()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + - 1]->minor . ']';
    }

    #line 979 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r133()
    {
        $this->_retvalue = '[' . $this->compiler->compileTag('private_special_variable', array(), '[\'section\'][\'' . $this->yystack[$this->yyidx + - 1]->minor . '\'][\'index\']') . ']';
    }

    #line 983 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r134()
    {
        $this->_retvalue = '[' . $this->compiler->compileTag('private_special_variable', array(), '[\'section\'][\'' . $this->yystack[$this->yyidx + - 3]->minor . '\'][\'' . $this->yystack[$this->yyidx + - 1]->minor . '\']') . ']';
    }

    #line 986 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r135()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + - 1]->minor . ']';
    }

    #line 992 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r137()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 1]->minor, 1) . '\'') . ']';;
    }

    #line 1008 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r141()
    {
        $this->_retvalue = '[]';
    }

    #line 1018 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r142()
    {
        $this->_retvalue = '\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'';
    }

    #line 1022 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r143()
    {
        $this->_retvalue = "''";
    }

    #line 1027 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r144()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1035 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r146()
    {
        $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' $');
        $this->_retvalue = $this->compiler->compileVariable('\'' . $var . '\'');
    }

    #line 1041 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r147()
    {
        $this->_retvalue = '(' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 1048 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r148()
    {
        if ($this->yystack[$this->yyidx + - 1]->minor['var'] == '\'smarty\'') {
            $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + - 1]->minor['smarty_internal_index']) . $this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + - 1]->minor['var']) . $this->yystack[$this->yyidx + - 1]->minor['smarty_internal_index'] . $this->yystack[$this->yyidx + 0]->minor;
        }
    }

    #line 1057 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r149()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1062 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r150()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1067 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r151()
    {
        if ($this->security && substr($this->yystack[$this->yyidx + - 1]->minor, 0, 1) == '_') {
            $this->compiler->trigger_template_error(self::Err1);
        }
        $this->_retvalue = '->' . $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1074 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r152()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 1]->minor) . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1081 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r153()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{' . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1088 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r154()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{\'' . $this->yystack[$this->yyidx + - 4]->minor . '\'.' . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1096 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r155()
    {
        $this->_retvalue = '->' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1104 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r156()
    {
        if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + - 3]->minor, $this->compiler)) {
            if (strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + - 3]->minor)) {
                $func_name = strtolower($this->yystack[$this->yyidx + - 3]->minor);
                if ($func_name == 'isset') {
                    if (count($this->yystack[$this->yyidx + - 1]->minor) == 0) {
                        $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                    }
                    $par = implode(',', $this->yystack[$this->yyidx + - 1]->minor);
                    if (strncasecmp($par, '$_smarty_tpl->getConfigVariable', strlen('$_smarty_tpl->getConfigVariable')) === 0) {
                        self::$prefix_number ++;
                        $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . '=' . str_replace(')', ', false)', $par) . ';?>';
                        $isset_par = '$_tmp' . self::$prefix_number;
                    } else {
                        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
                    }
                    $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . $isset_par . ")";
                } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {
                    if (count($this->yystack[$this->yyidx + - 1]->minor) != 1) {
                        $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                    }
                    if ($func_name == 'empty') {
                        $this->_retvalue = $func_name . '(' . str_replace("')->value", "',null,true,false)->value", $this->yystack[$this->yyidx + - 1]->minor[0]) . ')';
                    } else {
                        $this->_retvalue = $func_name . '(' . $this->yystack[$this->yyidx + - 1]->minor[0] . ')';
                    }
                } else {
                    $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ")";
                }
            } else {
                $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + - 3]->minor . "\"");
            }
        }
    }

    #line 1143 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r157()
    {
        if ($this->security && substr($this->yystack[$this->yyidx + - 3]->minor, 0, 1) == '_') {
            $this->compiler->trigger_template_error(self::Err1);
        }
        $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ")";
    }

    #line 1150 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r158()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        self::$prefix_number ++;
        $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . '=' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 3]->minor, 1) . '\'') . ';?>';
        $this->_retvalue = '$_tmp' . self::$prefix_number . '(' . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ')';
    }

    #line 1161 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r159()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 2]->minor, array($this->yystack[$this->yyidx + 0]->minor));
    }

    #line 1178 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r162()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 2]->minor, array(array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor)));
    }

    #line 1182 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r163()
    {
        $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 1190 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r165()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1198 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r166()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1217 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r170()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '', 'method');
    }

    #line 1222 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r171()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor, 'method');
    }

    #line 1227 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r172()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '');
    }

    #line 1232 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r173()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor, 'property');
    }

    #line 1237 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r174()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor, $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor, 'property');
    }

    #line 1243 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r175()
    {
        $this->_retvalue['op'] = ' ' . trim($this->yystack[$this->yyidx + 0]->minor) . ' ';
    }

    #line 1247 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r176()
    {
        static $lops = array('eq' => array('op' => ' == ', 'pre' => null), 'ne' => array('op' => ' != ', 'pre' => null), 'neq' => array('op' => ' != ', 'pre' => null), 'gt' => array('op' => ' > ', 'pre' => null), 'ge' => array('op' => ' >= ', 'pre' => null), 'gte' => array('op' => ' >= ', 'pre' => null), 'lt' => array('op' => ' < ', 'pre' => null), 'le' => array('op' => ' <= ', 'pre' => null), 'lte' => array('op' => ' <= ', 'pre' => null), 'mod' => array('op' => ' % ', 'pre' => null), 'and' => array('op' => ' && ', 'pre' => null), 'or' => array('op' => ' || ', 'pre' => null), 'xor' => array('op' => ' xor ', 'pre' => null), 'isdivby' => array('op' => ' % ', 'pre' => '!('), 'isnotdivby' => array('op' => ' % ', 'pre' => '('), 'isevenby' => array('op' => ' / ', 'pre' => '!(1 & '), 'isnotevenby' => array('op' => ' / ', 'pre' => '(1 & '), 'isoddby' => array('op' => ' / ', 'pre' => '(1 & '), 'isnotoddby' => array('op' => ' / ', 'pre' => '!(1 & '),);
        $op = strtolower(str_replace(' ', '', $this->yystack[$this->yyidx + 0]->minor));
        $this->_retvalue = $lops[$op];
    }

    #line 1273 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r177()
    {
        static $scond = array('iseven' => '!(1 & ', 'isnoteven' => '(1 & ', 'isodd' => '(1 & ', 'isnotodd' => '!(1 & ',);
        $op = strtolower(str_replace(' ', '', $this->yystack[$this->yyidx + 0]->minor));
        $this->_retvalue = $scond[$op];
    }

    #line 1287 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r178()
    {
        $this->_retvalue = 'array(' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 1295 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r180()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . ',' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1303 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r182()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '=>' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1307 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r183()
    {
        $this->_retvalue = '\'' . $this->yystack[$this->yyidx + - 2]->minor . '\'=>' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1323 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r186()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor->to_smarty_php();
    }

    #line 1328 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r187()
    {
        $this->yystack[$this->yyidx + - 1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 1333 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r188()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Dq($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1337 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r189()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)' . $this->yystack[$this->yyidx + - 1]->minor);
    }

    #line 1345 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r191()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)$_smarty_tpl->tpl_vars[\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\']->value');
    }

    #line 1353 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r193()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)(' . $this->yystack[$this->yyidx + - 1]->minor . ')');
    }

    #line 1357 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r194()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1361 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r195()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_DqContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        if ($this->yyTraceFILE && $yyruleno >= 0 && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n", $this->yyTracePrompt, $yyruleno, self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (isset(self::$yyReduceMap[$yyruleno])) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno][0];
        $yysize = self::$yyRuleInfo[$yyruleno][1];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i --) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx ++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
        #line 196 "../smarty/lexer/smarty_internal_templateparser.y"

        $this->internalError = true;
        $this->yymajor = $yymajor;
        $this->compiler->trigger_template_error();
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        #line 189 "../smarty/lexer/smarty_internal_templateparser.y"

        $this->successful = !$this->internalError;
        $this->internalError = false;
        $this->retvalue = $this->_retvalue;
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = - 1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            $this->yystack[] = $x;
        }
        $yyendofinput = ($yymajor == 0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n", $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL && !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt --;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n", $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n", $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor == 0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}

