{strip}

<div class="panel panel-default area-doc area_introducao" id="">
      <div class="panel-body">

          <ol class="breadcrumb">
            <li><a href="#">Core</a></li>
            <li class="active">{$texto}</li>
          </ol>

          <hr />

            <h3 class="p-t-20">REQUISITOS:</h3>
            <p class="f-s-16 line-height-m">
                - <code>PHP</code> 5.2 ou superior; <br />
                - Banco de Dados <code>Mysql</code> 5.0 ou superior <br />
                - Servidor: <code>Apache</code> <br />
                - SO: <code>Linux</code> <br />
            </p>

            <hr />

            <h3 class="p-t-20">SCRIPTS EXTERNOS</h3>
            <p class="f-s-16 line-height-m">
                - Controle de template: <code>smarty php</code> - <a href="http://www.smarty.net/docsv2/pt_BR/" target="_blank"><strong>Documentação Smarty PHP <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de disparo de e-mails: <code>phpmailer</code> - <a href="https://github.com/PHPMailer/PHPMailer" target="_blank"><strong>Documentação PHPmailer <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de disparo de sms: <code>zenvia gateway</code> - <a href="http://www.zenvia.com.br/desenvolvedores/" target="_blank"><strong>Documentação Zenvia SMS <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de geração de pdf: <code>mpdf</code> - <a href="https://github.com/mpdf/mpdf" target="_blank"><strong>Documentação Mpdf <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de redimensionamento de imagens: <code>WideImage</code> - <a href="http://wideimage.sourceforge.net/" target="_blank"><strong>Documentação WideImage <i class="fa fa-external-link-square"></i> </strong></a> <br />
                - Controle de geração de gráficos: <code>google chart</code> - <a href="https://developers.google.com/chart/" target="_blank"><strong>Documentação Google Chart <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de javascripts: <code>requirejs</code> - <a href="http://requirejs.org/" target="_blank"><strong>Documentação Requirejs <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Controle de CSS: <code>SASS e Compass</code> - <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html" target="_blank"><strong>Documentação SASS <i class="fa fa-external-link-square"></i> </strong></a> - <a href="http://compass-style.org/help/" target="_blank"><strong>Documentação Compass <i class="fa fa-external-link-square"></i> </strong></a><br />
                - Template do Admin: <code>AdminLTE</code> - <a href="https://almsaeedstudio.com/" target="_blank"><strong>Documentação AdminLTE <i class="fa fa-external-link-square"></i> </strong></a>  <br />
                - Framework CSS: <code>Bootstrap</code> - <a href="http://getbootstrap.com/" target="_blank"><strong>Documentação Bootstrap <i class="fa fa-external-link-square"></i> </strong></a>  <br />
                - CSS Icons: <code>Font Awesome</code> - <a href="https://fortawesome.github.io/Font-Awesome/icons/" target="_blank"><strong>Documentação Font-Awesome <i class="fa fa-external-link-square"></i> </strong></a>  <br />
            </p>

            <hr />

            <h3 class="p-t-20">DIRETÓRIOS DO CORE</h3>
            <p class="f-s-16 line-height-m">

            <code class="f-s-20">/adm</code> - Módulo administrativo do projeto; <br />
            <code class="f-s-20">/web</code> - Módulo do site do projeto; <br />
            <code class="f-s-20">/documentos</code> - Pasta com o Banco de Dados em SQL, DER e outros arquivos de documentação do projeto. <br />
            <code class="f-s-20">/files</code> - Pastas com os arquivos upados do sistema. (<code>imagens e documentos</code>). <br />
            <code class="f-s-20">/libs</code> - Pasta com os arquivos do <code>core do sistema</code>. <br />
            <code class="f-s-20">/libs/core</code> - Pasta com o controlador principal do sistema e onde estão as configurações de toda a aplicação (<code>banco de dados, smtp e outros</code>). <br />
            <code class="f-s-20">/libs/helper</code> - Helpers são códigos que auxiliam o controller na execução de tarefas especificas. (<code>ex: logs, view, upload ...</code>). <br />
            <code class="f-s-20">/libs/inc</code> - Pasta com os códigos de terceiros. (<code>phpmailer, mdpf, zenvia ...</code>). <br />
            <code class="f-s-20">/libs/logs</code> - Pasta com os logs do sistema em txt. (<code>logs de erros do banco de dados</code>). <br />

            </p>

            <hr />

            <h3 class="p-t-20">APLICAÇÕES</h3>
            <p class="f-s-16 line-height-m">
                O sistema funciona através de aplicações, dentro do sistema podemos ter várias aplicações. Por padrão temos duas pastas de aplicação: <code>adm</code> e <code>web</code>, a pasta <code>adm</code> é onde temos o painel administrativo do sistema e a pasta <code>web</code> é onde temos o site.
            </p>

            <hr />

            <h3 class="p-t-20">DIRETÓRIOS DE UMA APLICAÇÃO</h3>
            <p class="f-s-16 line-height-m">
            <code class="f-s-20">/pasta_aplicacao/controller/</code> <br />
            <code class="f-s-20">/pasta_aplicacao/model/</code>  <br />
            <code class="f-s-20">/pasta_aplicacao/view/</code> <br />
            </p>

            <hr />

            <h3 class="p-t-20">CRIAR UMA NOVA PASTA DE APLICAÇÃO:</h3>

<p class="f-s-18 line-height-g">
<strong>1) No arquivo: <code>/libs/core/config.php</code> </strong> <br />
<strong>2) Insira a nova aplicação como no exemplo abaixo:</strong> <br />
</p>
<pre class="m-b-25">
//PASTAS DA APLICAÇÃO
'paste_apps'                     => array('web','adm','nova_aplicacao'), // insira aqui
'template_smarty_web'            => $language,
'template_smarty_adm'            => $language,
'template_smarty_nova_aplicacao' => $language, // insira aqui
</pre>
<p class="f-s-18 line-height-g">
<strong>3) Duplique a pasta <code>web</code> e de o nome da sua aplicação</strong>  <br />
<strong>4) Vá até a pasta adm e copie o arquivo <code>pag.php e htacess</code></strong> <br />
<strong>5) Cole os arquivos dentro da nova pasta da sua aplicação</strong> <br />
<strong>6) Pronto! agora só modificar o parametro no controller e no model para usar sua nova aplicação</strong>
</p>


            <hr />

            <h3 class="p-t-20">FUNCIONALIDADES DO CORE</h3>
            <p class="f-s-16 line-height-m">
                - Controle geral da aplicação em um único arquivo (<code>arquivo: libs/core/config.php</code>); <br />
                - Controle de tempo de sessão ativa no sistema (<code>arquivo: libs/core/config.php</code>); <br />
                - Controle de tempo que o usuário online é destruido do sistema (<code>arquivo: libs/core/config.php</code>); <br />
                - Controle do status dos erros do sistema (<code>arquivo: libs/core/config.php</code>); <br />
                - Utilização da função de criptografia mcrypt_encrypt do php (<code>arquivo: libs/core/config.php</code>); <br />
                - Permite o cadastro e utilização de multiplas conexões smtp (<code>arquivo: libs/core/config.php</code>); <br />
                - Permite o cadastro e utilização de multiplas conexões mysql <code>pdo</code> (<code>arquivo: libs/core/config.php</code>); <br />
                - Utilização do <code>GZIP</code> para compactação do conteúdo da página; <br />
                - Url Amigável ativa nas aplicações; <br />
            </p>
            <br />

      </div>
</div>



<div class="panel panel-default area-doc area_introducao" id="">
      <div class="panel-body">

          <ol class="breadcrumb">
            <li><a href="#">Core</a></li>
            <li class="active">Controllers</li>
          </ol>


            <h3 class="p-t-20">CONTROLLERS</h3>
            <p class="f-s-16 line-height-m">
                Os controllers são onde as informações são processadas e validadas para a exibição na tela.
            </p>

            <h3 class="p-t-20">DIRETÓRIOS DO CONTROLLER</h3>
            <code class="f-s-20">/pasta_aplicacao/controller/config/</code> - Arquivos de configuração da aplicação, defino os actions e rotas desta aplicação. <br />
            <code class="f-s-20">/pasta_aplicacao/controller/includes/</code> - Blocos de códigos genéricos do controller (que se repetem em todos os controllers) que são incluidos nos actions. <br />

            <hr />

            <h3 class="p-t-20">ACTIONS (Funções do Controller)</h3>
            <p class="f-s-16 line-height-m">
                Os Actions são ações (funções) que são executadas no controller. Exemplo: action para adicionar, excluir e outras. <br />
                <br />
                - Arquivo de configuração de um action: <code>pasta_aplicacao/controller/config/config.php</code>; <br />
                - Actions são <code>Criptografados</code>; <br />
                - Acesso através via <code>GET ou POST</code> parametro: <code>cmd</code>; <br />
                - Exemplo de execução de um action via GET: <code>pasta_aplicacao/controller/testeController.php?cmd=fasdf324dfsfsda3241fdasfdsafdsa32</code>;
            </p>

<hr />

<h3 class="p-t-20">REGISTRAR UMA PÁGINA NA APLICAÇÃO</h3>

<p class="f-s-18 line-height-g">
<strong>1) No arquivo: <code>/pasta_aplicacao/controller/config/config.php</code> insira as informações como exibidas abaixo: </strong>
</p>
<pre class="m-b-25">
$paginas = array(
    "index", //0
    "erro", //1
    "nome_da_pagina",  // insira aqui
);
$this->setPaginas($paginas);
</pre>
<p class="f-s-18 line-height-g">
    <strong>3) Duplique o <code>indexController.php</code> e renomei o arquivo para o nome que você deu para a página. <code>EXEMPLO: nome_da_paginaController.php</code></strong><br />
    <strong>4) Abra o arquivo e altere os trechos abaixo para o nome de sua página:</strong>
</p>
<pre class="m-b-25">
//INICIO A CLASSE
if (!empty($_GET['cmd']) || !empty($_POST['cmd'])) {
	$control = new nome_da_paginaController();  // altere aqui
}

//CLASS ****-
class nome_da_paginaController {  // altere aqui

//INCLUDES
$this->core->includeController('nome_da_pagina',$this->dir_app); //incluo model // altere aqui

//INSTANCIO
$this->funcoes           = new funcoes();     //Instancio Funções
$this->model             = new nome_da_paginaModel();  //Instancio Model // altere aqui
</pre>
<p class="f-s-18 line-height-g">
    <strong>5) Vá até a pasta <code>/pasta_aplicacao/model/</code> e duplique o arquivo <code>indexModel.php</code></strong><br />
    <strong>6) Renomei o arquivo para o nome que você deu para a página. <code>EXEMPLO: nome_da_paginaModel.php </code></strong><br />
    <strong>7) Abra o arquivo e altere os trechos abaixo para o nome de sua página:</strong>
</p>
<pre class="m-b-25">
//CLASSE
class nome_da_paginaModel extends config_model { // altere aqui
</pre>
<p class="f-s-18 line-height-g">
<strong>8) Pronto! Para testar a página criada acesse: <code>EXEMPLO: seusite.com.br/nome_da_pagina</code></strong>
</p>

<hr />


<h3 class="p-t-20">CRIAR UM NOVO ACTION</h3>

<p class="f-s-18 line-height-g">
    <strong>1) No arquivo: <code>/pasta_aplicacao/controller/config/config.php</code> insira as informações como exibidas abaixo: </strong>
</p>
<pre class="m-b-25">
//NOME DA PÁGINA
$cmds1['nome_da_pagina'] = array(
    $funcoes->mycrypt("nome_do_action"),
);
$this->setCmds_controller($cmds1);</pre>
<p class="f-s-18 line-height-g">
    <strong>2) Vá no seu arquivo do controle: <code>/pasta_aplicacao/controller/testeController.php</code> insira as informações como exibidas abaixo: </strong>
</p>
<pre class="m-b-25">
<strong>Dentro da Classe insira o bloco abaixo:</strong>

//NOME DA ACTION QUE VOCÊ DEU NO ARQUIVO DE CONFIGURAÇÃO
function nome_do_action(){

    // Insira aqui os seus códigos

}</pre>


<hr />
            <h3 class="p-t-20">ACTION QUE CONTROLA A VIEW </h3>
            <p class="f-s-16 line-height-m">
                <a hide_area=".area-doc" show_area="#view" href="#" class="mostra_area">Documentação completa da view <i class="fa fa-external-link"></i></a>
            </p>

            <pre>
<strong>EXEMPLO DO ACTION QUE CONTROLA A VIEW (Usar no controller)</strong>

//CARREGO INTERFACE DA PÁGINA
function view($parametro = null){

    //===========================================================
    //CONFIGURAÇÕES GERAIS
    $status_auth            = false;  // Carrego código de autenticação [ True or false ]
    $parm_auth_status       = false; // Parametro permitido ou não [ True or false ]
    $indice_pagina_red_auth = 0;     // Indice do array da página que sera redirecionado
    $status_tempo_sessao    = false; // Carrego código de tempo de sessão [ True or false ]
    $status_cookies_page    = false; // Carrego código que grava o cookie da página acessada [ True or false ]
    $carrego_parametros     = false; // Carrego parametros [ True or false ]

    //===========================================================
    //PÁGINA ATIVA E MÓDULO ATIVO
    $interface['pagina_ativa'] = $parametro;
    $interface['modulos']      = $this->config_apps->get_config('modulos',0); //Módulo do template

    //===========================================================
    //CARREGA CSS DAS PAGINAS
    $interface['css'] = array(
        $this->config_apps->get_config('bootstrap'),
    );

    //===========================================================
    //INCLUDE DE VIEW, CARREGO AS CONFIGURAÇÕES GERAIS
    require $this->core->includeControllerInclude("view_1", $this->dir_app);

    //===========================================================
    //SETO OS DADOS NA VIEW
    $interface['title_pagina'] = ""; //title da página

    //============================================================================================
    //MONTO A VIEW
    $view->seto_dados_array($interface);
    $view->monto_view('modulos/'.$interface['modulos'].'/'.$parametro . ".phtml");

}</pre>

<hr />

            <h3 class="p-t-20">EXEMPLO BÁSICO DE UM CONTROLLER</h3>
            <pre>{literal}
//**
* Controller
*
* @author Fernando
**/

//=================================================================
//INCLUDES
require_once (dirname(dirname((dirname(__FILE__)))))."/libs/core/core.php";
//=================================================================

//INICIO A CLASSE
if (!empty($_GET['cmd']) || !empty($_POST['cmd'])) {
	$control = new indexController();
}

//CLASS
class indexController {

	//VARIAVEIS
	private $core;
	private $funcoes;
	private $model;
	private $logs;
	private $email;
	private $dir_app;
	private $config_apps;
	private $config_controller;

	//=================================================================
	//FUNÇÃO PRINCIPAL
	function __construct() {

		//PARAMETROS
		$this->dir_app = "pasta_aplicacao"; //Pasta da aplicação

		//INCLUDES
		$this->core = new core(); //Instancio CORE
		$this->core->includeViewConfig($this->dir_app); //incluo configurações da aplicação
		$this->core->includeController(null,$this->dir_app); //incluo model

		//INSTANCIO
		$this->funcoes           = new funcoes();     //Instancio Funções
		//$this->model           = new indexModel();  //Instancio Model
		$this->logs              = new logs();        //Instancio Logs
		$this->email             = new email();       //Instancio E-mails
		$this->config_apps       = new config_apps(); //Instancio configurações da aplicação
		$this->config_controller = new config_controller();  //Instancio Funções

		//FUNÇÕES PERMITIDAS
		$funcoes_permitidas = array();//$this->config_apps->getCmds_controller('core'); //Funções permitidas nesta página

		//------------------------------------------------------------
		//PEGO E TRATO O PARAMETRO RECEBIDO
		if (!empty($_GET['cmd']) || !empty($_POST['cmd'])) {

			//TRATO O PARAMETRO RECEBIDO
			if(!empty($_GET['cmd'])){
				$cmd = $this->funcoes->anti_injection($_GET['cmd']);
			}
			if(!empty($_POST['cmd'])){
				$cmd = $this->funcoes->anti_injection($_POST['cmd']);
			}

			//DESCRIPTOGRAFO
			$cmd = $this->funcoes->decrypt($cmd);
			for ($i=0; $i < count($funcoes_permitidas) ; $i++) {
				$funcoes_permitidas_[] = $this->funcoes->decrypt($funcoes_permitidas[$i]);
			}

			//VERIFICO SE FUNÇÃO ESTA NO ARRAY DE FUNÇÕES PERMITIDAS
			if (!in_array($cmd, $funcoes_permitidas_)) {
				//GRAVO LOG
				$this->logs->setApp($this->dir_app)->setUrl($_SERVER['SERVER_NAME'].$_SERVER ['REQUEST_URI'])->setPagina(end(explode("/", $_SERVER['PHP_SELF'])))
				->setMensagem($this->core->get_msg_array('acess_block_function', $_SERVER ['REQUEST_URI']))->gravo_log();
				header('location: ../../' . $this->config_apps->get_config('url_erro3') . ''); //Redireciono
				exit();
			}

			//CHAMO A FUNÇÃO
			$this->$cmd();
		}
	}


//====================================================================================================================================
//====================================================================================================================================
	//CARREGO INTERFACE DA PÁGINA
	function view($parametro = null){

        //===========================================================
        //CONFIGURAÇÕES GERAIS
        $status_auth            = false;  // Carrego código de autenticação [ True or false ]
        $parm_auth_status       = false; // Parametro permitido ou não [ True or false ]
        $indice_pagina_red_auth = 0;     // Indice do array da página que sera redirecionado
        $status_tempo_sessao    = false; // Carrego código de tempo de sessão [ True or false ]
        $status_cookies_page    = false; // Carrego código que grava o cookie da página acessada [ True or false ]
        $carrego_parametros     = false; // Carrego parametros [ True or false ]

        //===========================================================
        //PÁGINA ATIVA E MÓDULO ATIVO
        $interface['pagina_ativa'] = $parametro;
        $interface['modulos']      = $this->config_apps->get_config('modulos',0); //Módulo do template

        //===========================================================
        //CARREGA CSS DAS PAGINAS
        $interface['css'] = array(
            $this->config_apps->get_config('bootstrap'),
        );

        //===========================================================
        //INCLUDE DE VIEW, CARREGO AS CONFIGURAÇÕES GERAIS
        require $this->core->includeControllerInclude("view_1", $this->dir_app);

        //===========================================================
        //SETO OS DADOS NA VIEW
        $interface['title_pagina'] = ""; //title da página

        //============================================================================================
        //MONTO A VIEW
        $view->seto_dados_array($interface);
        $view->monto_view('modulos/'.$interface['modulos'].'/'.$parametro . ".phtml");

	}

	//=================================================================
	//AUTENTICO USUARIO NO SISTEMA
	function autentico_usuario(){
		$this->funcoes->auth_usuario($this->dir_app,true,$this->config_apps->get_config('link_page').$this->config_apps->getPaginas(0));
		exit();
	}

}{/literal}
</pre>

      </div>
</div>


<div class="panel panel-default area-doc area_introducao" id="">
      <div class="panel-body">

          <ol class="breadcrumb">
            <li><a href="#">Core</a></li>
            <li class="active">Models</li>
          </ol>

            <h3 class="p-t-20">MODELS</h3>
            <p class="f-s-16 line-height-m">
                Os Models são onde são executadas os selects, inserts, updtades, e outras ações relacionadas ao banco de dados.
            </p>

            <hr />

            <h3 class="p-t-20">EXEMPLO BÁSICO DE UM MODEL</h3>
            <pre>{literal}
/**
* Model
*
* @author Fernando
**/

//=================================================================
//INCLUDES
require_once (dirname(dirname((dirname(__FILE__)))))."/libs/core/core.php";
$core = new core();
$core->includeModel("pasta_aplicacao");
//=================================================================

//CLASSE
class indexModel extends config_model {

        //--------------------------------------------------
        //INSIRO UM REGISTRO NO BANCO DE DADOS
        function inserir_registro(){

            $this->setTable('tabela'); //Tabela
            $this->setColuna('campo')->setColuna('campo2'); //Colunas
            $this->setValue('valor')->setValue('valor1'); //Valores
            $exec = $this->Create(); //Executo comando
            $this->limpo_campos(); //Limpo campos
            $this->get_last_id(); //Pego o ID que acabou de ser inserido

            //RETORNO O STATUS PARA O CONTROLLER
            if(count($exec)>1){
                return true;
            }else{
                return false;
            }
        }

}{/literal}
</pre>



      </div>
</div>


<div class="panel panel-default area-doc area_introducao" id="">
      <div class="panel-body">

          <ol class="breadcrumb">
            <li><a href="#">Core</a></li>
            <li class="active">Views</li>
          </ol>

            <h3 class="p-t-20">VIEWS</h3>
            <p class="f-s-16 line-height-m">
                A View é a responsável por mostrar as informações processadas no controller (HTML). <br />
                <a hide_area=".area-doc" show_area="#view" href="#" class="mostra_area">Documentação completa da view <i class="fa fa-external-link"></i></a>
            </p>

            <hr />

            <h3 class="p-t-20">DIRETÓRIOS DA VIEW</h3>
            <code class="f-s-20">/pasta_aplicacao/view/assets/</code> - Pasta com os arquivos SASS, CSS, JS, FONTS E IMAGENS. <br />
            <code class="f-s-20">/pasta_aplicacao/view/templates/</code> - Pasta com os arquivos HTML da aplicação. <br />
            <code class="f-s-20">/pasta_aplicacao/view/templates/default/cache/</code> - Pasta com os arquivos de cache do template. <br />
            <br />

      </div>
</div>


<div class="panel panel-default area-doc area_introducao" id="">
      <div class="panel-body">

          <ol class="breadcrumb">
            <li><a href="#">Core</a></li>
            <li class="active">Helpers</li>
          </ol>

            <h3 class="p-t-20">HELPERS</h3>
            <p class="f-s-16 line-height-m">
                Os Helpers são funções auxiliadoras do controller, exemplo de helpers: logs, funções de validação e outras.
            </p>

            <hr />

            <h3 class="p-t-20">HELPERS INCLUSOS</h3>
            <code class="f-s-20">/libs/helpers/backupHelper.php</code> - Helper que faz o backup de arquivos e do banco de dados. <br />
            <code class="f-s-20">/libs/helpers/conexao_pdoHelper.php</code> - Helper que faz a conexão com o banco de dados mysql via PDO. <br />
            <code class="f-s-20">/libs/helpers/emailHelper.php</code> - Helper que faz o disparo de e-mail através do PHPmailer. <br />
            <code class="f-s-20">/libs/helpers/exportaHelper.php</code> - Helper que cria um arquivo no formato xls. <br />
            <code class="f-s-20">/libs/helpers/funcoesHelper.php</code> - Helper com todas as funções gerais que são usadas no sistema. <br />
            <code class="f-s-20">/libs/helpers/logsHelper.php</code> - Helper que insere no banco os logs do sistema, logs de acesso, logs de e-mails e sms enviados. <br />
            <code class="f-s-20">/libs/helpers/mont_htmlHelper.php</code> - Helper que monta conteúdos html do smarty php, listagens e campos de formulário. <br />
            <code class="f-s-20">/libs/helpers/navegador_soHelper.php</code> - Helper que identifica o navegador utilizado. <br />
            <code class="f-s-20">/libs/helpers/smsHelper.php</code> - Helper que envia um SMS através do gateway de SMS da Zenvia. <br />
            <code class="f-s-20">/libs/helpers/uploadHelper.php</code> - Helper que faz a validação de arquivos (imagem ou documentos), redimensiona imagens e corta imagens. <br />
            <code class="f-s-20">/libs/helpers/usuario_sessaoHelper.php</code> - Helper que controla os usuários online no sistema e tempo de sessão. <br />
            <code class="f-s-20">/libs/helpers/viewHelper.php</code> - Helper que controla a camada de visualização do sistema. <br />

            <br />




      </div>
</div>
